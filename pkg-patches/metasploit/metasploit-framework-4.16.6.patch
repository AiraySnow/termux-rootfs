diff -uNr msf/Gemfile.lock msf.mod/Gemfile.lock
--- msf/Gemfile.lock	2017-09-11 18:16:58.015955680 +0300
+++ msf.mod/Gemfile.lock	2017-09-12 16:56:25.152977852 +0300
@@ -137,7 +137,7 @@
       activemodel (~> 4.2.6)
       activesupport (~> 4.2.6)
       railties (~> 4.2.6)
-    metasploit-credential (2.0.12)
+    metasploit-credential (2.0.13)
       metasploit-concern
       metasploit-model
       metasploit_data_models
@@ -214,12 +214,12 @@
       activesupport (= 4.2.9)
       rake (>= 0.8.7)
       thor (>= 0.18.1, < 2.0)
-    rake (12.0.0)
+    rake (12.1.0)
     rb-readline (0.5.5)
-    rbnacl (4.0.2)
+    rbnacl (3.4.0)
       ffi
     rbnacl-libsodium (1.0.13)
-      rbnacl (>= 3.0.1)
+      rbnacl (~> 3.0, >= 3.0.1)
     recog (2.1.15)
       nokogiri
     redcarpet (3.4.0)
diff -uNr msf/Rakefile msf.mod/Rakefile
--- msf/Rakefile	2017-09-11 18:16:42.285955691 +0300
+++ msf.mod/Rakefile	2017-09-12 16:56:25.152977852 +0300
@@ -1,4 +1,4 @@
-#!/usr/bin/env rake
+#!/data/data/com.termux/files/usr/bin/env rake
 require File.expand_path('../config/application', __FILE__)
 require 'metasploit/framework/require'
 require 'metasploit/framework/spec/untested_payloads'
diff -uNr msf/data/exploits/capture/http/forms/extractforms.rb msf.mod/data/exploits/capture/http/forms/extractforms.rb
--- msf/data/exploits/capture/http/forms/extractforms.rb	2017-09-11 18:16:42.455955691 +0300
+++ msf.mod/data/exploits/capture/http/forms/extractforms.rb	2017-09-12 16:56:25.162977852 +0300
@@ -1,4 +1,4 @@
-#!/usr/bin/env ruby
+#!/data/data/com.termux/files/usr/bin/env ruby
 
 # Copyright (C) 2008 Rapid7, Inc.
 
diff -uNr msf/data/exploits/capture/http/forms/grabforms.rb msf.mod/data/exploits/capture/http/forms/grabforms.rb
--- msf/data/exploits/capture/http/forms/grabforms.rb	2017-09-11 18:16:42.465955691 +0300
+++ msf.mod/data/exploits/capture/http/forms/grabforms.rb	2017-09-12 16:56:25.162977852 +0300
@@ -1,4 +1,4 @@
-#!/usr/bin/env ruby
+#!/data/data/com.termux/files/usr/bin/env ruby
 
 # Copyright (C) 2008 Rapid7, Inc.
 
diff -uNr msf/data/sounds/aiff2wav.rb msf.mod/data/sounds/aiff2wav.rb
--- msf/data/sounds/aiff2wav.rb	2017-09-11 18:16:42.605955691 +0300
+++ msf.mod/data/sounds/aiff2wav.rb	2017-09-12 16:56:25.162977852 +0300
@@ -1,4 +1,4 @@
-#!/usr/bin/env ruby
+#!/data/data/com.termux/files/usr/bin/env ruby
 
 Dir.open(".").entries.grep(/.aiff$/).each do |inp|
   out = inp.gsub(".aiff", ".wav")
diff -uNr msf/external/source/DLLHijackAuditKit/regenerate_binaries.rb msf.mod/external/source/DLLHijackAuditKit/regenerate_binaries.rb
--- msf/external/source/DLLHijackAuditKit/regenerate_binaries.rb	2017-09-11 18:16:42.685955691 +0300
+++ msf.mod/external/source/DLLHijackAuditKit/regenerate_binaries.rb	2017-09-12 16:56:25.172977852 +0300
@@ -1,4 +1,4 @@
-#!/usr/bin/env ruby
+#!/data/data/com.termux/files/usr/bin/env ruby
 
 dllbase = File.expand_path(File.dirname(__FILE__))
 msfbase = File.expand_path(File.join(dllbase, "..", "..", ".."))
diff -uNr msf/external/source/ReflectiveDLLInjection/.gitignore msf.mod/external/source/ReflectiveDLLInjection/.gitignore
--- msf/external/source/ReflectiveDLLInjection/.gitignore	1970-01-01 03:00:00.000000000 +0300
+++ msf.mod/external/source/ReflectiveDLLInjection/.gitignore	2017-09-12 19:48:24.432970471 +0300
@@ -0,0 +1,16 @@
+Release/
+Debug/
+x64/
+dll/Release/
+dll/Debug/
+dll/reflective_dll.vcproj.*.user
+dll/reflective_dll.vcxproj.user
+inject/Release/
+inject/Debug/
+inject/inject.vcproj.*.user
+inject/inject.vcxproj.user
+rdi.ncb
+rdi.suo
+rdi.sdf
+rdi.opensdf
+rdi.v11.suo
\ No newline at end of file
diff -uNr msf/external/source/ReflectiveDLLInjection/LICENSE.txt msf.mod/external/source/ReflectiveDLLInjection/LICENSE.txt
--- msf/external/source/ReflectiveDLLInjection/LICENSE.txt	1970-01-01 03:00:00.000000000 +0300
+++ msf.mod/external/source/ReflectiveDLLInjection/LICENSE.txt	2017-09-12 19:48:24.432970471 +0300
@@ -0,0 +1,25 @@
+Copyright (c) 2011, Stephen Fewer of Harmony Security (www.harmonysecurity.com)
+All rights reserved.
+
+Redistribution and use in source and binary forms, with or without modification, are permitted 
+provided that the following conditions are met:
+
+    * Redistributions of source code must retain the above copyright notice, this list of 
+conditions and the following disclaimer.
+
+    * Redistributions in binary form must reproduce the above copyright notice, this list of 
+conditions and the following disclaimer in the documentation and/or other materials provided 
+with the distribution.
+
+    * Neither the name of Harmony Security nor the names of its contributors may be used to
+endorse or promote products derived from this software without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR 
+IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
+FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
+CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
+CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
+SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY 
+THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR 
+OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
+POSSIBILITY OF SUCH DAMAGE.
\ No newline at end of file
diff -uNr msf/external/source/ReflectiveDLLInjection/Readme.md msf.mod/external/source/ReflectiveDLLInjection/Readme.md
--- msf/external/source/ReflectiveDLLInjection/Readme.md	1970-01-01 03:00:00.000000000 +0300
+++ msf.mod/external/source/ReflectiveDLLInjection/Readme.md	2017-09-12 19:48:24.432970471 +0300
@@ -0,0 +1,40 @@
+About
+=====
+
+Reflective DLL injection is a library injection technique in which the concept of reflective programming is employed to perform the loading of a library from memory into a host process. As such the library is responsible for loading itself by implementing a minimal Portable Executable (PE) file loader. It can then govern, with minimal interaction with the host system and process, how it will load and interact with the host.
+
+Injection works from Windows NT4 up to and including Windows 8, running on x86, x64 and ARM where applicable.
+
+Overview
+========
+
+The process of remotely injecting a library into a process is two fold. Firstly, the library you wish to inject must be written into the address space of the target process (Herein referred to as the host process). Secondly the library must be loaded into that host process in such a way that the library's run time expectations are met, such as resolving its imports or relocating it to a suitable location in memory.
+
+Assuming we have code execution in the host process and the library we wish to inject has been written into an arbitrary location of memory in the host process, Reflective DLL Injection works as follows.
+
+* Execution is passed, either via CreateRemoteThread() or a tiny bootstrap shellcode, to the library's ReflectiveLoader function which is an exported function found in the library's export table.
+* As the library's image will currently exists in an arbitrary location in memory the ReflectiveLoader will first calculate its own image's current location in memory so as to be able to parse its own headers for use later on.
+* The ReflectiveLoader will then parse the host processes kernel32.dll export table in order to calculate the addresses of three functions required by the loader, namely LoadLibraryA, GetProcAddress and VirtualAlloc.
+* The ReflectiveLoader will now allocate a continuous region of memory into which it will proceed to load its own image. The location is not important as the loader will correctly relocate the image later on.
+* The library's headers and sections are loaded into their new locations in memory.
+* The ReflectiveLoader will then process the newly loaded copy of its image's import table, loading any additional library's and resolving their respective imported function addresses.
+* The ReflectiveLoader will then process the newly loaded copy of its image's relocation table.
+* The ReflectiveLoader will then call its newly loaded image's entry point function, DllMain with DLL_PROCESS_ATTACH. The library has now been successfully loaded into memory.
+* Finally the ReflectiveLoader will return execution to the initial bootstrap shellcode which called it, or if it was called via CreateRemoteThread, the thread will terminate.
+
+Build
+=====
+
+Open the 'rdi.sln' file in Visual Studio C++ and build the solution in Release mode to make inject.exe and reflective_dll.dll
+
+Usage
+=====
+
+To test use the inject.exe to inject reflective_dll.dll into a host process via a process id, e.g.:
+
+> inject.exe 1234
+	
+License
+=======
+
+Licensed under a 3 clause BSD license, please see LICENSE.txt for details.
Binary files msf/external/source/ReflectiveDLLInjection/bin/inject.arm.exe and msf.mod/external/source/ReflectiveDLLInjection/bin/inject.arm.exe differ
Binary files msf/external/source/ReflectiveDLLInjection/bin/inject.exe and msf.mod/external/source/ReflectiveDLLInjection/bin/inject.exe differ
Binary files msf/external/source/ReflectiveDLLInjection/bin/inject.x64.exe and msf.mod/external/source/ReflectiveDLLInjection/bin/inject.x64.exe differ
Binary files msf/external/source/ReflectiveDLLInjection/bin/reflective_dll.arm.dll and msf.mod/external/source/ReflectiveDLLInjection/bin/reflective_dll.arm.dll differ
Binary files msf/external/source/ReflectiveDLLInjection/bin/reflective_dll.dll and msf.mod/external/source/ReflectiveDLLInjection/bin/reflective_dll.dll differ
Binary files msf/external/source/ReflectiveDLLInjection/bin/reflective_dll.x64.dll and msf.mod/external/source/ReflectiveDLLInjection/bin/reflective_dll.x64.dll differ
diff -uNr msf/external/source/ReflectiveDLLInjection/dll/reflective_dll.sln msf.mod/external/source/ReflectiveDLLInjection/dll/reflective_dll.sln
--- msf/external/source/ReflectiveDLLInjection/dll/reflective_dll.sln	1970-01-01 03:00:00.000000000 +0300
+++ msf.mod/external/source/ReflectiveDLLInjection/dll/reflective_dll.sln	2017-09-12 19:48:24.452970471 +0300
@@ -0,0 +1,20 @@
+﻿
+Microsoft Visual Studio Solution File, Format Version 10.00
+# Visual C++ Express 2008
+Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "reflective_dll", "reflective_dll.vcproj", "{3A371EBD-EEE1-4B2A-88B9-93E7BABE0949}"
+EndProject
+Global
+	GlobalSection(SolutionConfigurationPlatforms) = preSolution
+		Debug|Win32 = Debug|Win32
+		Release|Win32 = Release|Win32
+	EndGlobalSection
+	GlobalSection(ProjectConfigurationPlatforms) = postSolution
+		{3A371EBD-EEE1-4B2A-88B9-93E7BABE0949}.Debug|Win32.ActiveCfg = Release|Win32
+		{3A371EBD-EEE1-4B2A-88B9-93E7BABE0949}.Debug|Win32.Build.0 = Release|Win32
+		{3A371EBD-EEE1-4B2A-88B9-93E7BABE0949}.Release|Win32.ActiveCfg = Release|Win32
+		{3A371EBD-EEE1-4B2A-88B9-93E7BABE0949}.Release|Win32.Build.0 = Release|Win32
+	EndGlobalSection
+	GlobalSection(SolutionProperties) = preSolution
+		HideSolutionNode = FALSE
+	EndGlobalSection
+EndGlobal
diff -uNr msf/external/source/ReflectiveDLLInjection/dll/reflective_dll.vcproj msf.mod/external/source/ReflectiveDLLInjection/dll/reflective_dll.vcproj
--- msf/external/source/ReflectiveDLLInjection/dll/reflective_dll.vcproj	1970-01-01 03:00:00.000000000 +0300
+++ msf.mod/external/source/ReflectiveDLLInjection/dll/reflective_dll.vcproj	2017-09-12 19:48:24.452970471 +0300
@@ -0,0 +1,357 @@
+<?xml version="1.0" encoding="Windows-1252"?>
+<VisualStudioProject
+	ProjectType="Visual C++"
+	Version="9.00"
+	Name="reflective_dll"
+	ProjectGUID="{3A371EBD-EEE1-4B2A-88B9-93E7BABE0949}"
+	RootNamespace="reflective_dll"
+	Keyword="Win32Proj"
+	TargetFrameworkVersion="196613"
+	>
+	<Platforms>
+		<Platform
+			Name="Win32"
+		/>
+		<Platform
+			Name="x64"
+		/>
+	</Platforms>
+	<ToolFiles>
+	</ToolFiles>
+	<Configurations>
+		<Configuration
+			Name="Debug|Win32"
+			OutputDirectory="$(SolutionDir)$(ConfigurationName)"
+			IntermediateDirectory="$(ConfigurationName)"
+			ConfigurationType="2"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				Optimization="0"
+				PreprocessorDefinitions="WIN32;_DEBUG;_WINDOWS;_USRDLL;REFLECTIVE_DLL_EXPORTS"
+				MinimalRebuild="true"
+				BasicRuntimeChecks="3"
+				RuntimeLibrary="3"
+				UsePrecompiledHeader="0"
+				WarningLevel="3"
+				DebugInformationFormat="4"
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLinkerTool"
+				LinkIncremental="2"
+				GenerateDebugInformation="true"
+				SubSystem="2"
+				TargetMachine="1"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCManifestTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCFxCopTool"
+			/>
+			<Tool
+				Name="VCAppVerifierTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+		</Configuration>
+		<Configuration
+			Name="Debug|x64"
+			OutputDirectory="$(SolutionDir)$(PlatformName)\$(ConfigurationName)"
+			IntermediateDirectory="$(PlatformName)\$(ConfigurationName)"
+			ConfigurationType="2"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+				TargetEnvironment="3"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				Optimization="0"
+				PreprocessorDefinitions="WIN32;_DEBUG;_WINDOWS;_USRDLL;REFLECTIVE_DLL_EXPORTS"
+				MinimalRebuild="true"
+				BasicRuntimeChecks="3"
+				RuntimeLibrary="3"
+				UsePrecompiledHeader="0"
+				WarningLevel="3"
+				DebugInformationFormat="3"
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLinkerTool"
+				LinkIncremental="2"
+				GenerateDebugInformation="true"
+				SubSystem="2"
+				TargetMachine="17"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCManifestTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCFxCopTool"
+			/>
+			<Tool
+				Name="VCAppVerifierTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+		</Configuration>
+		<Configuration
+			Name="Release|Win32"
+			OutputDirectory="$(SolutionDir)$(ConfigurationName)"
+			IntermediateDirectory="$(ConfigurationName)"
+			ConfigurationType="2"
+			CharacterSet="2"
+			WholeProgramOptimization="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				Optimization="2"
+				InlineFunctionExpansion="1"
+				EnableIntrinsicFunctions="true"
+				PreprocessorDefinitions="WIN32;NDEBUG;_WINDOWS;_USRDLL;REFLECTIVE_DLL_EXPORTS;REFLECTIVEDLLINJECTION_VIA_LOADREMOTELIBRARYR;REFLECTIVEDLLINJECTION_CUSTOM_DLLMAIN"
+				RuntimeLibrary="0"
+				EnableFunctionLevelLinking="true"
+				UsePrecompiledHeader="0"
+				WarningLevel="3"
+				DebugInformationFormat="3"
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLinkerTool"
+				LinkIncremental="1"
+				GenerateDebugInformation="true"
+				SubSystem="2"
+				OptimizeReferences="2"
+				EnableCOMDATFolding="2"
+				TargetMachine="1"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCManifestTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCFxCopTool"
+			/>
+			<Tool
+				Name="VCAppVerifierTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+				CommandLine="copy ..\Release\reflective_dll.dll ..\bin\"
+			/>
+		</Configuration>
+		<Configuration
+			Name="Release|x64"
+			OutputDirectory="$(SolutionDir)$(PlatformName)\$(ConfigurationName)"
+			IntermediateDirectory="$(PlatformName)\$(ConfigurationName)"
+			ConfigurationType="2"
+			CharacterSet="2"
+			WholeProgramOptimization="0"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+				TargetEnvironment="3"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				Optimization="2"
+				InlineFunctionExpansion="1"
+				EnableIntrinsicFunctions="true"
+				FavorSizeOrSpeed="2"
+				WholeProgramOptimization="false"
+				PreprocessorDefinitions="WIN64;NDEBUG;_WINDOWS;_USRDLL;REFLECTIVE_DLL_EXPORTS;_WIN64;REFLECTIVEDLLINJECTION_VIA_LOADREMOTELIBRARYR;REFLECTIVEDLLINJECTION_CUSTOM_DLLMAIN"
+				RuntimeLibrary="0"
+				EnableFunctionLevelLinking="true"
+				UsePrecompiledHeader="0"
+				WarningLevel="3"
+				DebugInformationFormat="3"
+				CompileAs="2"
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLinkerTool"
+				OutputFile="$(OutDir)\$(ProjectName).x64.dll"
+				LinkIncremental="1"
+				GenerateDebugInformation="true"
+				SubSystem="2"
+				OptimizeReferences="2"
+				EnableCOMDATFolding="2"
+				TargetMachine="17"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCManifestTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCFxCopTool"
+			/>
+			<Tool
+				Name="VCAppVerifierTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+				CommandLine="copy $(OutDir)\$(ProjectName).x64.dll ..\bin\"
+			/>
+		</Configuration>
+	</Configurations>
+	<References>
+	</References>
+	<Files>
+		<Filter
+			Name="Source Files"
+			Filter="cpp;c;cc;cxx;def;odl;idl;hpj;bat;asm;asmx"
+			UniqueIdentifier="{4FC737F1-C7A5-4376-A066-2A32D752A2FF}"
+			>
+			<File
+				RelativePath=".\src\ReflectiveDll.c"
+				>
+			</File>
+			<File
+				RelativePath=".\src\ReflectiveLoader.c"
+				>
+			</File>
+		</Filter>
+		<Filter
+			Name="Header Files"
+			Filter="h;hpp;hxx;hm;inl;inc;xsd"
+			UniqueIdentifier="{93995380-89BD-4b04-88EB-625FBE52EBFB}"
+			>
+			<File
+				RelativePath=".\src\ReflectiveDLLInjection.h"
+				>
+			</File>
+			<File
+				RelativePath=".\src\ReflectiveLoader.h"
+				>
+			</File>
+		</Filter>
+	</Files>
+	<Globals>
+	</Globals>
+</VisualStudioProject>
diff -uNr msf/external/source/ReflectiveDLLInjection/dll/reflective_dll.vcxproj msf.mod/external/source/ReflectiveDLLInjection/dll/reflective_dll.vcxproj
--- msf/external/source/ReflectiveDLLInjection/dll/reflective_dll.vcxproj	1970-01-01 03:00:00.000000000 +0300
+++ msf.mod/external/source/ReflectiveDLLInjection/dll/reflective_dll.vcxproj	2017-09-12 19:48:24.452970471 +0300
@@ -0,0 +1,263 @@
+﻿<?xml version="1.0" encoding="utf-8"?>
+<Project DefaultTargets="Build" ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <ItemGroup Label="ProjectConfigurations">
+    <ProjectConfiguration Include="Debug|ARM">
+      <Configuration>Debug</Configuration>
+      <Platform>ARM</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="Debug|Win32">
+      <Configuration>Debug</Configuration>
+      <Platform>Win32</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="Debug|x64">
+      <Configuration>Debug</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="Release|ARM">
+      <Configuration>Release</Configuration>
+      <Platform>ARM</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="Release|Win32">
+      <Configuration>Release</Configuration>
+      <Platform>Win32</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="Release|x64">
+      <Configuration>Release</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+  </ItemGroup>
+  <PropertyGroup Label="Globals">
+    <ProjectGuid>{3A371EBD-EEE1-4B2A-88B9-93E7BABE0949}</ProjectGuid>
+    <RootNamespace>reflective_dll</RootNamespace>
+    <Keyword>Win32Proj</Keyword>
+  </PropertyGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'" Label="Configuration">
+    <ConfigurationType>DynamicLibrary</ConfigurationType>
+    <PlatformToolset>v110</PlatformToolset>
+    <CharacterSet>MultiByte</CharacterSet>
+    <WholeProgramOptimization>true</WholeProgramOptimization>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|ARM'" Label="Configuration">
+    <ConfigurationType>DynamicLibrary</ConfigurationType>
+    <PlatformToolset>v110</PlatformToolset>
+    <CharacterSet>MultiByte</CharacterSet>
+    <WholeProgramOptimization>true</WholeProgramOptimization>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'" Label="Configuration">
+    <ConfigurationType>DynamicLibrary</ConfigurationType>
+    <PlatformToolset>v110</PlatformToolset>
+    <CharacterSet>Unicode</CharacterSet>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|ARM'" Label="Configuration">
+    <ConfigurationType>DynamicLibrary</ConfigurationType>
+    <PlatformToolset>v110</PlatformToolset>
+    <CharacterSet>Unicode</CharacterSet>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
+    <ConfigurationType>DynamicLibrary</ConfigurationType>
+    <PlatformToolset>v110</PlatformToolset>
+    <CharacterSet>MultiByte</CharacterSet>
+    <WholeProgramOptimization>false</WholeProgramOptimization>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'" Label="Configuration">
+    <ConfigurationType>DynamicLibrary</ConfigurationType>
+    <PlatformToolset>v110</PlatformToolset>
+    <CharacterSet>Unicode</CharacterSet>
+  </PropertyGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
+  <ImportGroup Label="ExtensionSettings">
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release|ARM'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Debug|ARM'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+  </ImportGroup>
+  <PropertyGroup Label="UserMacros" />
+  <PropertyGroup>
+    <_ProjectFileVersion>11.0.50727.1</_ProjectFileVersion>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
+    <OutDir>$(SolutionDir)$(Configuration)\</OutDir>
+    <IntDir>$(Configuration)\</IntDir>
+    <LinkIncremental>true</LinkIncremental>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|ARM'">
+    <LinkIncremental>true</LinkIncremental>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
+    <OutDir>$(SolutionDir)$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(Platform)\$(Configuration)\</IntDir>
+    <LinkIncremental>true</LinkIncremental>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
+    <OutDir>$(SolutionDir)$(Configuration)\</OutDir>
+    <IntDir>$(Configuration)\</IntDir>
+    <LinkIncremental>false</LinkIncremental>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|ARM'">
+    <LinkIncremental>false</LinkIncremental>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+    <OutDir>$(SolutionDir)$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(Platform)\$(Configuration)\</IntDir>
+    <LinkIncremental>false</LinkIncremental>
+  </PropertyGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
+    <ClCompile>
+      <Optimization>Disabled</Optimization>
+      <PreprocessorDefinitions>WIN32;_DEBUG;_WINDOWS;_USRDLL;REFLECTIVE_DLL_EXPORTS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <MinimalRebuild>true</MinimalRebuild>
+      <BasicRuntimeChecks>EnableFastChecks</BasicRuntimeChecks>
+      <RuntimeLibrary>MultiThreadedDebugDLL</RuntimeLibrary>
+      <PrecompiledHeader />
+      <WarningLevel>Level3</WarningLevel>
+      <DebugInformationFormat>EditAndContinue</DebugInformationFormat>
+    </ClCompile>
+    <Link>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+      <SubSystem>Windows</SubSystem>
+      <TargetMachine>MachineX86</TargetMachine>
+    </Link>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|ARM'">
+    <ClCompile>
+      <Optimization>Disabled</Optimization>
+      <PreprocessorDefinitions>WIN32;_DEBUG;_WINDOWS;_USRDLL;REFLECTIVE_DLL_EXPORTS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <MinimalRebuild>true</MinimalRebuild>
+      <BasicRuntimeChecks>EnableFastChecks</BasicRuntimeChecks>
+      <RuntimeLibrary>MultiThreadedDebugDLL</RuntimeLibrary>
+      <PrecompiledHeader>
+      </PrecompiledHeader>
+      <WarningLevel>Level3</WarningLevel>
+      <DebugInformationFormat>EditAndContinue</DebugInformationFormat>
+    </ClCompile>
+    <Link>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+      <SubSystem>Windows</SubSystem>
+    </Link>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
+    <Midl>
+      <TargetEnvironment>X64</TargetEnvironment>
+    </Midl>
+    <ClCompile>
+      <Optimization>Disabled</Optimization>
+      <PreprocessorDefinitions>WIN32;_DEBUG;_WINDOWS;_USRDLL;REFLECTIVE_DLL_EXPORTS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <MinimalRebuild>true</MinimalRebuild>
+      <BasicRuntimeChecks>EnableFastChecks</BasicRuntimeChecks>
+      <RuntimeLibrary>MultiThreadedDebugDLL</RuntimeLibrary>
+      <PrecompiledHeader />
+      <WarningLevel>Level3</WarningLevel>
+      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
+    </ClCompile>
+    <Link>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+      <SubSystem>Windows</SubSystem>
+      <TargetMachine>MachineX64</TargetMachine>
+    </Link>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
+    <ClCompile>
+      <Optimization>MaxSpeed</Optimization>
+      <InlineFunctionExpansion>OnlyExplicitInline</InlineFunctionExpansion>
+      <IntrinsicFunctions>true</IntrinsicFunctions>
+      <PreprocessorDefinitions>WIN32;NDEBUG;_WINDOWS;_USRDLL;WIN_X86;REFLECTIVE_DLL_EXPORTS;REFLECTIVEDLLINJECTION_VIA_LOADREMOTELIBRARYR;REFLECTIVEDLLINJECTION_CUSTOM_DLLMAIN;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <RuntimeLibrary>MultiThreaded</RuntimeLibrary>
+      <FunctionLevelLinking>true</FunctionLevelLinking>
+      <PrecompiledHeader />
+      <WarningLevel>Level3</WarningLevel>
+      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
+    </ClCompile>
+    <Link>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+      <SubSystem>Windows</SubSystem>
+      <OptimizeReferences>true</OptimizeReferences>
+      <EnableCOMDATFolding>true</EnableCOMDATFolding>
+      <TargetMachine>MachineX86</TargetMachine>
+    </Link>
+    <PostBuildEvent>
+      <Command>copy ..\Release\reflective_dll.dll ..\bin\</Command>
+    </PostBuildEvent>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|ARM'">
+    <ClCompile>
+      <Optimization>MinSpace</Optimization>
+      <InlineFunctionExpansion>OnlyExplicitInline</InlineFunctionExpansion>
+      <IntrinsicFunctions>true</IntrinsicFunctions>
+      <PreprocessorDefinitions>WIN32;NDEBUG;_WINDOWS;_USRDLL;WIN_ARM;REFLECTIVE_DLL_EXPORTS;REFLECTIVEDLLINJECTION_VIA_LOADREMOTELIBRARYR;REFLECTIVEDLLINJECTION_CUSTOM_DLLMAIN;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <RuntimeLibrary>MultiThreaded</RuntimeLibrary>
+      <FunctionLevelLinking>true</FunctionLevelLinking>
+      <PrecompiledHeader>
+      </PrecompiledHeader>
+      <WarningLevel>Level3</WarningLevel>
+      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
+      <BufferSecurityCheck>true</BufferSecurityCheck>
+      <CompileAs>Default</CompileAs>
+    </ClCompile>
+    <Link>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+      <SubSystem>Windows</SubSystem>
+      <OptimizeReferences>true</OptimizeReferences>
+      <EnableCOMDATFolding>true</EnableCOMDATFolding>
+      <OutputFile>$(OutDir)$(ProjectName).arm.dll</OutputFile>
+    </Link>
+    <PostBuildEvent>
+      <Command>copy ..\ARM\Release\reflective_dll.arm.dll ..\bin\</Command>
+    </PostBuildEvent>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+    <Midl>
+      <TargetEnvironment>X64</TargetEnvironment>
+    </Midl>
+    <ClCompile>
+      <Optimization>MaxSpeed</Optimization>
+      <InlineFunctionExpansion>OnlyExplicitInline</InlineFunctionExpansion>
+      <IntrinsicFunctions>true</IntrinsicFunctions>
+      <FavorSizeOrSpeed>Size</FavorSizeOrSpeed>
+      <WholeProgramOptimization>false</WholeProgramOptimization>
+      <PreprocessorDefinitions>WIN64;NDEBUG;_WINDOWS;_USRDLL;REFLECTIVE_DLL_EXPORTS;WIN_X64;REFLECTIVEDLLINJECTION_VIA_LOADREMOTELIBRARYR;REFLECTIVEDLLINJECTION_CUSTOM_DLLMAIN;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <RuntimeLibrary>MultiThreaded</RuntimeLibrary>
+      <FunctionLevelLinking>true</FunctionLevelLinking>
+      <PrecompiledHeader />
+      <WarningLevel>Level3</WarningLevel>
+      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
+      <CompileAs>CompileAsCpp</CompileAs>
+    </ClCompile>
+    <Link>
+      <OutputFile>$(OutDir)$(ProjectName).x64.dll</OutputFile>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+      <SubSystem>Windows</SubSystem>
+      <OptimizeReferences>true</OptimizeReferences>
+      <EnableCOMDATFolding>true</EnableCOMDATFolding>
+      <TargetMachine>MachineX64</TargetMachine>
+    </Link>
+    <PostBuildEvent>
+      <Command>copy $(OutDir)$(ProjectName).x64.dll ..\bin\</Command>
+    </PostBuildEvent>
+  </ItemDefinitionGroup>
+  <ItemGroup>
+    <ClCompile Include="src\ReflectiveDll.c" />
+    <ClCompile Include="src\ReflectiveLoader.c" />
+  </ItemGroup>
+  <ItemGroup>
+    <ClInclude Include="src\ReflectiveDLLInjection.h" />
+    <ClInclude Include="src\ReflectiveLoader.h" />
+  </ItemGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
+  <ImportGroup Label="ExtensionTargets">
+  </ImportGroup>
+</Project>
\ No newline at end of file
diff -uNr msf/external/source/ReflectiveDLLInjection/dll/reflective_dll.vcxproj.filters msf.mod/external/source/ReflectiveDLLInjection/dll/reflective_dll.vcxproj.filters
--- msf/external/source/ReflectiveDLLInjection/dll/reflective_dll.vcxproj.filters	1970-01-01 03:00:00.000000000 +0300
+++ msf.mod/external/source/ReflectiveDLLInjection/dll/reflective_dll.vcxproj.filters	2017-09-12 19:48:24.452970471 +0300
@@ -0,0 +1,29 @@
+﻿<?xml version="1.0" encoding="utf-8"?>
+<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <ItemGroup>
+    <Filter Include="Source Files">
+      <UniqueIdentifier>{4FC737F1-C7A5-4376-A066-2A32D752A2FF}</UniqueIdentifier>
+      <Extensions>cpp;c;cc;cxx;def;odl;idl;hpj;bat;asm;asmx</Extensions>
+    </Filter>
+    <Filter Include="Header Files">
+      <UniqueIdentifier>{93995380-89BD-4b04-88EB-625FBE52EBFB}</UniqueIdentifier>
+      <Extensions>h;hpp;hxx;hm;inl;inc;xsd</Extensions>
+    </Filter>
+  </ItemGroup>
+  <ItemGroup>
+    <ClCompile Include="src\ReflectiveDll.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="src\ReflectiveLoader.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+  </ItemGroup>
+  <ItemGroup>
+    <ClInclude Include="src\ReflectiveDLLInjection.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="src\ReflectiveLoader.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+  </ItemGroup>
+</Project>
\ No newline at end of file
diff -uNr msf/external/source/ReflectiveDLLInjection/dll/src/ReflectiveDLLInjection.h msf.mod/external/source/ReflectiveDLLInjection/dll/src/ReflectiveDLLInjection.h
--- msf/external/source/ReflectiveDLLInjection/dll/src/ReflectiveDLLInjection.h	1970-01-01 03:00:00.000000000 +0300
+++ msf.mod/external/source/ReflectiveDLLInjection/dll/src/ReflectiveDLLInjection.h	2017-09-12 19:48:24.452970471 +0300
@@ -0,0 +1,51 @@
+//===============================================================================================//
+// Copyright (c) 2012, Stephen Fewer of Harmony Security (www.harmonysecurity.com)
+// All rights reserved.
+// 
+// Redistribution and use in source and binary forms, with or without modification, are permitted 
+// provided that the following conditions are met:
+// 
+//     * Redistributions of source code must retain the above copyright notice, this list of 
+// conditions and the following disclaimer.
+// 
+//     * Redistributions in binary form must reproduce the above copyright notice, this list of 
+// conditions and the following disclaimer in the documentation and/or other materials provided 
+// with the distribution.
+// 
+//     * Neither the name of Harmony Security nor the names of its contributors may be used to
+// endorse or promote products derived from this software without specific prior written permission.
+// 
+// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR 
+// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
+// FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
+// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
+// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
+// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY 
+// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR 
+// OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
+// POSSIBILITY OF SUCH DAMAGE.
+//===============================================================================================//
+#ifndef _REFLECTIVEDLLINJECTION_REFLECTIVEDLLINJECTION_H
+#define _REFLECTIVEDLLINJECTION_REFLECTIVEDLLINJECTION_H
+//===============================================================================================//
+#define WIN32_LEAN_AND_MEAN
+#include <windows.h>
+
+// we declare some common stuff in here...
+
+#define DLL_QUERY_HMODULE		6
+
+#define DEREF( name )*(UINT_PTR *)(name)
+#define DEREF_64( name )*(DWORD64 *)(name)
+#define DEREF_32( name )*(DWORD *)(name)
+#define DEREF_16( name )*(WORD *)(name)
+#define DEREF_8( name )*(BYTE *)(name)
+
+typedef ULONG_PTR (WINAPI * REFLECTIVELOADER)( VOID );
+typedef BOOL (WINAPI * DLLMAIN)( HINSTANCE, DWORD, LPVOID );
+
+#define DLLEXPORT   __declspec( dllexport ) 
+
+//===============================================================================================//
+#endif
+//===============================================================================================//
diff -uNr msf/external/source/ReflectiveDLLInjection/dll/src/ReflectiveDll.c msf.mod/external/source/ReflectiveDLLInjection/dll/src/ReflectiveDll.c
--- msf/external/source/ReflectiveDLLInjection/dll/src/ReflectiveDll.c	1970-01-01 03:00:00.000000000 +0300
+++ msf.mod/external/source/ReflectiveDLLInjection/dll/src/ReflectiveDll.c	2017-09-12 19:48:24.452970471 +0300
@@ -0,0 +1,32 @@
+//===============================================================================================//
+// This is a stub for the actuall functionality of the DLL.
+//===============================================================================================//
+#include "ReflectiveLoader.h"
+
+// Note: REFLECTIVEDLLINJECTION_VIA_LOADREMOTELIBRARYR and REFLECTIVEDLLINJECTION_CUSTOM_DLLMAIN are
+// defined in the project properties (Properties->C++->Preprocessor) so as we can specify our own 
+// DllMain and use the LoadRemoteLibraryR() API to inject this DLL.
+
+// You can use this value as a pseudo hinstDLL value (defined and set via ReflectiveLoader.c)
+extern HINSTANCE hAppInstance;
+//===============================================================================================//
+BOOL WINAPI DllMain( HINSTANCE hinstDLL, DWORD dwReason, LPVOID lpReserved )
+{
+    BOOL bReturnValue = TRUE;
+	switch( dwReason ) 
+    { 
+		case DLL_QUERY_HMODULE:
+			if( lpReserved != NULL )
+				*(HMODULE *)lpReserved = hAppInstance;
+			break;
+		case DLL_PROCESS_ATTACH:
+			hAppInstance = hinstDLL;
+			MessageBoxA( NULL, "Hello from DllMain!", "Reflective Dll Injection", MB_OK );
+			break;
+		case DLL_PROCESS_DETACH:
+		case DLL_THREAD_ATTACH:
+		case DLL_THREAD_DETACH:
+            break;
+    }
+	return bReturnValue;
+}
\ No newline at end of file
diff -uNr msf/external/source/ReflectiveDLLInjection/dll/src/ReflectiveLoader.c msf.mod/external/source/ReflectiveDLLInjection/dll/src/ReflectiveLoader.c
--- msf/external/source/ReflectiveDLLInjection/dll/src/ReflectiveLoader.c	1970-01-01 03:00:00.000000000 +0300
+++ msf.mod/external/source/ReflectiveDLLInjection/dll/src/ReflectiveLoader.c	2017-09-12 19:48:24.452970471 +0300
@@ -0,0 +1,496 @@
+//===============================================================================================//
+// Copyright (c) 2012, Stephen Fewer of Harmony Security (www.harmonysecurity.com)
+// All rights reserved.
+// 
+// Redistribution and use in source and binary forms, with or without modification, are permitted 
+// provided that the following conditions are met:
+// 
+//     * Redistributions of source code must retain the above copyright notice, this list of 
+// conditions and the following disclaimer.
+// 
+//     * Redistributions in binary form must reproduce the above copyright notice, this list of 
+// conditions and the following disclaimer in the documentation and/or other materials provided 
+// with the distribution.
+// 
+//     * Neither the name of Harmony Security nor the names of its contributors may be used to
+// endorse or promote products derived from this software without specific prior written permission.
+// 
+// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR 
+// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
+// FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
+// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
+// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
+// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY 
+// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR 
+// OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
+// POSSIBILITY OF SUCH DAMAGE.
+//===============================================================================================//
+#include "ReflectiveLoader.h"
+//===============================================================================================//
+// Our loader will set this to a pseudo correct HINSTANCE/HMODULE value
+HINSTANCE hAppInstance = NULL;
+//===============================================================================================//
+#pragma intrinsic( _ReturnAddress )
+// This function can not be inlined by the compiler or we will not get the address we expect. Ideally 
+// this code will be compiled with the /O2 and /Ob1 switches. Bonus points if we could take advantage of 
+// RIP relative addressing in this instance but I dont believe we can do so with the compiler intrinsics 
+// available (and no inline asm available under x64).
+__declspec(noinline) ULONG_PTR caller( VOID ) { return (ULONG_PTR)_ReturnAddress(); }
+//===============================================================================================//
+
+// Note 1: If you want to have your own DllMain, define REFLECTIVEDLLINJECTION_CUSTOM_DLLMAIN,  
+//         otherwise the DllMain at the end of this file will be used.
+
+// Note 2: If you are injecting the DLL via LoadRemoteLibraryR, define REFLECTIVEDLLINJECTION_VIA_LOADREMOTELIBRARYR,
+//         otherwise it is assumed you are calling the ReflectiveLoader via a stub.
+
+// This is our position independent reflective DLL loader/injector
+#ifdef REFLECTIVEDLLINJECTION_VIA_LOADREMOTELIBRARYR
+DLLEXPORT ULONG_PTR WINAPI ReflectiveLoader( LPVOID lpParameter )
+#else
+DLLEXPORT ULONG_PTR WINAPI ReflectiveLoader( VOID )
+#endif
+{
+	// the functions we need
+	LOADLIBRARYA pLoadLibraryA     = NULL;
+	GETPROCADDRESS pGetProcAddress = NULL;
+	VIRTUALALLOC pVirtualAlloc     = NULL;
+	NTFLUSHINSTRUCTIONCACHE pNtFlushInstructionCache = NULL;
+
+	USHORT usCounter;
+
+	// the initial location of this image in memory
+	ULONG_PTR uiLibraryAddress;
+	// the kernels base address and later this images newly loaded base address
+	ULONG_PTR uiBaseAddress;
+
+	// variables for processing the kernels export table
+	ULONG_PTR uiAddressArray;
+	ULONG_PTR uiNameArray;
+	ULONG_PTR uiExportDir;
+	ULONG_PTR uiNameOrdinals;
+	DWORD dwHashValue;
+
+	// variables for loading this image
+	ULONG_PTR uiHeaderValue;
+	ULONG_PTR uiValueA;
+	ULONG_PTR uiValueB;
+	ULONG_PTR uiValueC;
+	ULONG_PTR uiValueD;
+	ULONG_PTR uiValueE;
+
+	// STEP 0: calculate our images current base address
+
+	// we will start searching backwards from our callers return address.
+	uiLibraryAddress = caller();
+
+	// loop through memory backwards searching for our images base address
+	// we dont need SEH style search as we shouldnt generate any access violations with this
+	while( TRUE )
+	{
+		if( ((PIMAGE_DOS_HEADER)uiLibraryAddress)->e_magic == IMAGE_DOS_SIGNATURE )
+		{
+			uiHeaderValue = ((PIMAGE_DOS_HEADER)uiLibraryAddress)->e_lfanew;
+			// some x64 dll's can trigger a bogus signature (IMAGE_DOS_SIGNATURE == 'POP r10'),
+			// we sanity check the e_lfanew with an upper threshold value of 1024 to avoid problems.
+			if( uiHeaderValue >= sizeof(IMAGE_DOS_HEADER) && uiHeaderValue < 1024 )
+			{
+				uiHeaderValue += uiLibraryAddress;
+				// break if we have found a valid MZ/PE header
+				if( ((PIMAGE_NT_HEADERS)uiHeaderValue)->Signature == IMAGE_NT_SIGNATURE )
+					break;
+			}
+		}
+		uiLibraryAddress--;
+	}
+
+	// STEP 1: process the kernels exports for the functions our loader needs...
+
+	// get the Process Enviroment Block
+#ifdef WIN_X64
+	uiBaseAddress = __readgsqword( 0x60 );
+#else
+#ifdef WIN_X86
+	uiBaseAddress = __readfsdword( 0x30 );
+#else WIN_ARM
+	uiBaseAddress = *(DWORD *)( (BYTE *)_MoveFromCoprocessor( 15, 0, 13, 0, 2 ) + 0x30 );
+#endif
+#endif
+
+	// get the processes loaded modules. ref: http://msdn.microsoft.com/en-us/library/aa813708(VS.85).aspx
+	uiBaseAddress = (ULONG_PTR)((_PPEB)uiBaseAddress)->pLdr;
+
+	// get the first entry of the InMemoryOrder module list
+	uiValueA = (ULONG_PTR)((PPEB_LDR_DATA)uiBaseAddress)->InMemoryOrderModuleList.Flink;
+	while( uiValueA )
+	{
+		// get pointer to current modules name (unicode string)
+		uiValueB = (ULONG_PTR)((PLDR_DATA_TABLE_ENTRY)uiValueA)->BaseDllName.pBuffer;
+		// set bCounter to the length for the loop
+		usCounter = ((PLDR_DATA_TABLE_ENTRY)uiValueA)->BaseDllName.Length;
+		// clear uiValueC which will store the hash of the module name
+		uiValueC = 0;
+
+		// compute the hash of the module name...
+		do
+		{
+			uiValueC = ror( (DWORD)uiValueC );
+			// normalize to uppercase if the madule name is in lowercase
+			if( *((BYTE *)uiValueB) >= 'a' )
+				uiValueC += *((BYTE *)uiValueB) - 0x20;
+			else
+				uiValueC += *((BYTE *)uiValueB);
+			uiValueB++;
+		} while( --usCounter );
+
+		// compare the hash with that of kernel32.dll
+		if( (DWORD)uiValueC == KERNEL32DLL_HASH )
+		{
+			// get this modules base address
+			uiBaseAddress = (ULONG_PTR)((PLDR_DATA_TABLE_ENTRY)uiValueA)->DllBase;
+
+			// get the VA of the modules NT Header
+			uiExportDir = uiBaseAddress + ((PIMAGE_DOS_HEADER)uiBaseAddress)->e_lfanew;
+
+			// uiNameArray = the address of the modules export directory entry
+			uiNameArray = (ULONG_PTR)&((PIMAGE_NT_HEADERS)uiExportDir)->OptionalHeader.DataDirectory[ IMAGE_DIRECTORY_ENTRY_EXPORT ];
+
+			// get the VA of the export directory
+			uiExportDir = ( uiBaseAddress + ((PIMAGE_DATA_DIRECTORY)uiNameArray)->VirtualAddress );
+
+			// get the VA for the array of name pointers
+			uiNameArray = ( uiBaseAddress + ((PIMAGE_EXPORT_DIRECTORY )uiExportDir)->AddressOfNames );
+			
+			// get the VA for the array of name ordinals
+			uiNameOrdinals = ( uiBaseAddress + ((PIMAGE_EXPORT_DIRECTORY )uiExportDir)->AddressOfNameOrdinals );
+
+			usCounter = 3;
+
+			// loop while we still have imports to find
+			while( usCounter > 0 )
+			{
+				// compute the hash values for this function name
+				dwHashValue = hash( (char *)( uiBaseAddress + DEREF_32( uiNameArray ) )  );
+				
+				// if we have found a function we want we get its virtual address
+				if( dwHashValue == LOADLIBRARYA_HASH || dwHashValue == GETPROCADDRESS_HASH || dwHashValue == VIRTUALALLOC_HASH )
+				{
+					// get the VA for the array of addresses
+					uiAddressArray = ( uiBaseAddress + ((PIMAGE_EXPORT_DIRECTORY )uiExportDir)->AddressOfFunctions );
+
+					// use this functions name ordinal as an index into the array of name pointers
+					uiAddressArray += ( DEREF_16( uiNameOrdinals ) * sizeof(DWORD) );
+
+					// store this functions VA
+					if( dwHashValue == LOADLIBRARYA_HASH )
+						pLoadLibraryA = (LOADLIBRARYA)( uiBaseAddress + DEREF_32( uiAddressArray ) );
+					else if( dwHashValue == GETPROCADDRESS_HASH )
+						pGetProcAddress = (GETPROCADDRESS)( uiBaseAddress + DEREF_32( uiAddressArray ) );
+					else if( dwHashValue == VIRTUALALLOC_HASH )
+						pVirtualAlloc = (VIRTUALALLOC)( uiBaseAddress + DEREF_32( uiAddressArray ) );
+			
+					// decrement our counter
+					usCounter--;
+				}
+
+				// get the next exported function name
+				uiNameArray += sizeof(DWORD);
+
+				// get the next exported function name ordinal
+				uiNameOrdinals += sizeof(WORD);
+			}
+		}
+		else if( (DWORD)uiValueC == NTDLLDLL_HASH )
+		{
+			// get this modules base address
+			uiBaseAddress = (ULONG_PTR)((PLDR_DATA_TABLE_ENTRY)uiValueA)->DllBase;
+
+			// get the VA of the modules NT Header
+			uiExportDir = uiBaseAddress + ((PIMAGE_DOS_HEADER)uiBaseAddress)->e_lfanew;
+
+			// uiNameArray = the address of the modules export directory entry
+			uiNameArray = (ULONG_PTR)&((PIMAGE_NT_HEADERS)uiExportDir)->OptionalHeader.DataDirectory[ IMAGE_DIRECTORY_ENTRY_EXPORT ];
+
+			// get the VA of the export directory
+			uiExportDir = ( uiBaseAddress + ((PIMAGE_DATA_DIRECTORY)uiNameArray)->VirtualAddress );
+
+			// get the VA for the array of name pointers
+			uiNameArray = ( uiBaseAddress + ((PIMAGE_EXPORT_DIRECTORY )uiExportDir)->AddressOfNames );
+			
+			// get the VA for the array of name ordinals
+			uiNameOrdinals = ( uiBaseAddress + ((PIMAGE_EXPORT_DIRECTORY )uiExportDir)->AddressOfNameOrdinals );
+
+			usCounter = 1;
+
+			// loop while we still have imports to find
+			while( usCounter > 0 )
+			{
+				// compute the hash values for this function name
+				dwHashValue = hash( (char *)( uiBaseAddress + DEREF_32( uiNameArray ) )  );
+				
+				// if we have found a function we want we get its virtual address
+				if( dwHashValue == NTFLUSHINSTRUCTIONCACHE_HASH )
+				{
+					// get the VA for the array of addresses
+					uiAddressArray = ( uiBaseAddress + ((PIMAGE_EXPORT_DIRECTORY )uiExportDir)->AddressOfFunctions );
+
+					// use this functions name ordinal as an index into the array of name pointers
+					uiAddressArray += ( DEREF_16( uiNameOrdinals ) * sizeof(DWORD) );
+
+					// store this functions VA
+					if( dwHashValue == NTFLUSHINSTRUCTIONCACHE_HASH )
+						pNtFlushInstructionCache = (NTFLUSHINSTRUCTIONCACHE)( uiBaseAddress + DEREF_32( uiAddressArray ) );
+
+					// decrement our counter
+					usCounter--;
+				}
+
+				// get the next exported function name
+				uiNameArray += sizeof(DWORD);
+
+				// get the next exported function name ordinal
+				uiNameOrdinals += sizeof(WORD);
+			}
+		}
+
+		// we stop searching when we have found everything we need.
+		if( pLoadLibraryA && pGetProcAddress && pVirtualAlloc && pNtFlushInstructionCache )
+			break;
+
+		// get the next entry
+		uiValueA = DEREF( uiValueA );
+	}
+
+	// STEP 2: load our image into a new permanent location in memory...
+
+	// get the VA of the NT Header for the PE to be loaded
+	uiHeaderValue = uiLibraryAddress + ((PIMAGE_DOS_HEADER)uiLibraryAddress)->e_lfanew;
+
+	// allocate all the memory for the DLL to be loaded into. we can load at any address because we will  
+	// relocate the image. Also zeros all memory and marks it as READ, WRITE and EXECUTE to avoid any problems.
+	uiBaseAddress = (ULONG_PTR)pVirtualAlloc( NULL, ((PIMAGE_NT_HEADERS)uiHeaderValue)->OptionalHeader.SizeOfImage, MEM_RESERVE|MEM_COMMIT, PAGE_EXECUTE_READWRITE );
+
+	// we must now copy over the headers
+	uiValueA = ((PIMAGE_NT_HEADERS)uiHeaderValue)->OptionalHeader.SizeOfHeaders;
+	uiValueB = uiLibraryAddress;
+	uiValueC = uiBaseAddress;
+
+	while( uiValueA-- )
+		*(BYTE *)uiValueC++ = *(BYTE *)uiValueB++;
+
+	// STEP 3: load in all of our sections...
+
+	// uiValueA = the VA of the first section
+	uiValueA = ( (ULONG_PTR)&((PIMAGE_NT_HEADERS)uiHeaderValue)->OptionalHeader + ((PIMAGE_NT_HEADERS)uiHeaderValue)->FileHeader.SizeOfOptionalHeader );
+	
+	// itterate through all sections, loading them into memory.
+	uiValueE = ((PIMAGE_NT_HEADERS)uiHeaderValue)->FileHeader.NumberOfSections;
+	while( uiValueE-- )
+	{
+		// uiValueB is the VA for this section
+		uiValueB = ( uiBaseAddress + ((PIMAGE_SECTION_HEADER)uiValueA)->VirtualAddress );
+
+		// uiValueC if the VA for this sections data
+		uiValueC = ( uiLibraryAddress + ((PIMAGE_SECTION_HEADER)uiValueA)->PointerToRawData );
+
+		// copy the section over
+		uiValueD = ((PIMAGE_SECTION_HEADER)uiValueA)->SizeOfRawData;
+
+		while( uiValueD-- )
+			*(BYTE *)uiValueB++ = *(BYTE *)uiValueC++;
+
+		// get the VA of the next section
+		uiValueA += sizeof( IMAGE_SECTION_HEADER );
+	}
+
+	// STEP 4: process our images import table...
+
+	// uiValueB = the address of the import directory
+	uiValueB = (ULONG_PTR)&((PIMAGE_NT_HEADERS)uiHeaderValue)->OptionalHeader.DataDirectory[ IMAGE_DIRECTORY_ENTRY_IMPORT ];
+	
+	// we assume their is an import table to process
+	// uiValueC is the first entry in the import table
+	uiValueC = ( uiBaseAddress + ((PIMAGE_DATA_DIRECTORY)uiValueB)->VirtualAddress );
+	
+	// itterate through all imports
+	while( ((PIMAGE_IMPORT_DESCRIPTOR)uiValueC)->Name )
+	{
+		// use LoadLibraryA to load the imported module into memory
+		uiLibraryAddress = (ULONG_PTR)pLoadLibraryA( (LPCSTR)( uiBaseAddress + ((PIMAGE_IMPORT_DESCRIPTOR)uiValueC)->Name ) );
+
+		// uiValueD = VA of the OriginalFirstThunk
+		uiValueD = ( uiBaseAddress + ((PIMAGE_IMPORT_DESCRIPTOR)uiValueC)->OriginalFirstThunk );
+	
+		// uiValueA = VA of the IAT (via first thunk not origionalfirstthunk)
+		uiValueA = ( uiBaseAddress + ((PIMAGE_IMPORT_DESCRIPTOR)uiValueC)->FirstThunk );
+
+		// itterate through all imported functions, importing by ordinal if no name present
+		while( DEREF(uiValueA) )
+		{
+			// sanity check uiValueD as some compilers only import by FirstThunk
+			if( uiValueD && ((PIMAGE_THUNK_DATA)uiValueD)->u1.Ordinal & IMAGE_ORDINAL_FLAG )
+			{
+				// get the VA of the modules NT Header
+				uiExportDir = uiLibraryAddress + ((PIMAGE_DOS_HEADER)uiLibraryAddress)->e_lfanew;
+
+				// uiNameArray = the address of the modules export directory entry
+				uiNameArray = (ULONG_PTR)&((PIMAGE_NT_HEADERS)uiExportDir)->OptionalHeader.DataDirectory[ IMAGE_DIRECTORY_ENTRY_EXPORT ];
+
+				// get the VA of the export directory
+				uiExportDir = ( uiLibraryAddress + ((PIMAGE_DATA_DIRECTORY)uiNameArray)->VirtualAddress );
+
+				// get the VA for the array of addresses
+				uiAddressArray = ( uiLibraryAddress + ((PIMAGE_EXPORT_DIRECTORY )uiExportDir)->AddressOfFunctions );
+
+				// use the import ordinal (- export ordinal base) as an index into the array of addresses
+				uiAddressArray += ( ( IMAGE_ORDINAL( ((PIMAGE_THUNK_DATA)uiValueD)->u1.Ordinal ) - ((PIMAGE_EXPORT_DIRECTORY )uiExportDir)->Base ) * sizeof(DWORD) );
+
+				// patch in the address for this imported function
+				DEREF(uiValueA) = ( uiLibraryAddress + DEREF_32(uiAddressArray) );
+			}
+			else
+			{
+				// get the VA of this functions import by name struct
+				uiValueB = ( uiBaseAddress + DEREF(uiValueA) );
+
+				// use GetProcAddress and patch in the address for this imported function
+				DEREF(uiValueA) = (ULONG_PTR)pGetProcAddress( (HMODULE)uiLibraryAddress, (LPCSTR)((PIMAGE_IMPORT_BY_NAME)uiValueB)->Name );
+			}
+			// get the next imported function
+			uiValueA += sizeof( ULONG_PTR );
+			if( uiValueD )
+				uiValueD += sizeof( ULONG_PTR );
+		}
+
+		// get the next import
+		uiValueC += sizeof( IMAGE_IMPORT_DESCRIPTOR );
+	}
+
+	// STEP 5: process all of our images relocations...
+
+	// calculate the base address delta and perform relocations (even if we load at desired image base)
+	uiLibraryAddress = uiBaseAddress - ((PIMAGE_NT_HEADERS)uiHeaderValue)->OptionalHeader.ImageBase;
+
+	// uiValueB = the address of the relocation directory
+	uiValueB = (ULONG_PTR)&((PIMAGE_NT_HEADERS)uiHeaderValue)->OptionalHeader.DataDirectory[ IMAGE_DIRECTORY_ENTRY_BASERELOC ];
+
+	// check if their are any relocations present
+	if( ((PIMAGE_DATA_DIRECTORY)uiValueB)->Size )
+	{
+		// uiValueC is now the first entry (IMAGE_BASE_RELOCATION)
+		uiValueC = ( uiBaseAddress + ((PIMAGE_DATA_DIRECTORY)uiValueB)->VirtualAddress );
+
+		// and we itterate through all entries...
+		while( ((PIMAGE_BASE_RELOCATION)uiValueC)->SizeOfBlock )
+		{
+			// uiValueA = the VA for this relocation block
+			uiValueA = ( uiBaseAddress + ((PIMAGE_BASE_RELOCATION)uiValueC)->VirtualAddress );
+
+			// uiValueB = number of entries in this relocation block
+			uiValueB = ( ((PIMAGE_BASE_RELOCATION)uiValueC)->SizeOfBlock - sizeof(IMAGE_BASE_RELOCATION) ) / sizeof( IMAGE_RELOC );
+
+			// uiValueD is now the first entry in the current relocation block
+			uiValueD = uiValueC + sizeof(IMAGE_BASE_RELOCATION);
+
+			// we itterate through all the entries in the current block...
+			while( uiValueB-- )
+			{
+				// perform the relocation, skipping IMAGE_REL_BASED_ABSOLUTE as required.
+				// we dont use a switch statement to avoid the compiler building a jump table
+				// which would not be very position independent!
+				if( ((PIMAGE_RELOC)uiValueD)->type == IMAGE_REL_BASED_DIR64 )
+					*(ULONG_PTR *)(uiValueA + ((PIMAGE_RELOC)uiValueD)->offset) += uiLibraryAddress;
+				else if( ((PIMAGE_RELOC)uiValueD)->type == IMAGE_REL_BASED_HIGHLOW )
+					*(DWORD *)(uiValueA + ((PIMAGE_RELOC)uiValueD)->offset) += (DWORD)uiLibraryAddress;
+#ifdef WIN_ARM
+				// Note: On ARM, the compiler optimization /O2 seems to introduce an off by one issue, possibly a code gen bug. Using /O1 instead avoids this problem.
+				else if( ((PIMAGE_RELOC)uiValueD)->type == IMAGE_REL_BASED_ARM_MOV32T )
+				{	
+					register DWORD dwInstruction;
+					register DWORD dwAddress;
+					register WORD wImm;
+					// get the MOV.T instructions DWORD value (We add 4 to the offset to go past the first MOV.W which handles the low word)
+					dwInstruction = *(DWORD *)( uiValueA + ((PIMAGE_RELOC)uiValueD)->offset + sizeof(DWORD) );
+					// flip the words to get the instruction as expected
+					dwInstruction = MAKELONG( HIWORD(dwInstruction), LOWORD(dwInstruction) );
+					// sanity chack we are processing a MOV instruction...
+					if( (dwInstruction & ARM_MOV_MASK) == ARM_MOVT )
+					{
+						// pull out the encoded 16bit value (the high portion of the address-to-relocate)
+						wImm  = (WORD)( dwInstruction & 0x000000FF);
+						wImm |= (WORD)((dwInstruction & 0x00007000) >> 4);
+						wImm |= (WORD)((dwInstruction & 0x04000000) >> 15);
+						wImm |= (WORD)((dwInstruction & 0x000F0000) >> 4);
+						// apply the relocation to the target address
+						dwAddress = ( (WORD)HIWORD(uiLibraryAddress) + wImm ) & 0xFFFF;
+						// now create a new instruction with the same opcode and register param.
+						dwInstruction  = (DWORD)( dwInstruction & ARM_MOV_MASK2 );
+						// patch in the relocated address...
+						dwInstruction |= (DWORD)(dwAddress & 0x00FF);
+						dwInstruction |= (DWORD)(dwAddress & 0x0700) << 4;
+						dwInstruction |= (DWORD)(dwAddress & 0x0800) << 15;
+						dwInstruction |= (DWORD)(dwAddress & 0xF000) << 4;
+						// now flip the instructions words and patch back into the code...
+						*(DWORD *)( uiValueA + ((PIMAGE_RELOC)uiValueD)->offset + sizeof(DWORD) ) = MAKELONG( HIWORD(dwInstruction), LOWORD(dwInstruction) );
+					}
+				}
+#endif
+				else if( ((PIMAGE_RELOC)uiValueD)->type == IMAGE_REL_BASED_HIGH )
+					*(WORD *)(uiValueA + ((PIMAGE_RELOC)uiValueD)->offset) += HIWORD(uiLibraryAddress);
+				else if( ((PIMAGE_RELOC)uiValueD)->type == IMAGE_REL_BASED_LOW )
+					*(WORD *)(uiValueA + ((PIMAGE_RELOC)uiValueD)->offset) += LOWORD(uiLibraryAddress);
+
+				// get the next entry in the current relocation block
+				uiValueD += sizeof( IMAGE_RELOC );
+			}
+
+			// get the next entry in the relocation directory
+			uiValueC = uiValueC + ((PIMAGE_BASE_RELOCATION)uiValueC)->SizeOfBlock;
+		}
+	}
+
+	// STEP 6: call our images entry point
+
+	// uiValueA = the VA of our newly loaded DLL/EXE's entry point
+	uiValueA = ( uiBaseAddress + ((PIMAGE_NT_HEADERS)uiHeaderValue)->OptionalHeader.AddressOfEntryPoint );
+
+	// We must flush the instruction cache to avoid stale code being used which was updated by our relocation processing.
+	pNtFlushInstructionCache( (HANDLE)-1, NULL, 0 );
+
+	// call our respective entry point, fudging our hInstance value
+#ifdef REFLECTIVEDLLINJECTION_VIA_LOADREMOTELIBRARYR
+	// if we are injecting a DLL via LoadRemoteLibraryR we call DllMain and pass in our parameter (via the DllMain lpReserved parameter)
+	((DLLMAIN)uiValueA)( (HINSTANCE)uiBaseAddress, DLL_PROCESS_ATTACH, lpParameter );
+#else
+	// if we are injecting an DLL via a stub we call DllMain with no parameter
+	((DLLMAIN)uiValueA)( (HINSTANCE)uiBaseAddress, DLL_PROCESS_ATTACH, NULL );
+#endif
+
+	// STEP 8: return our new entry point address so whatever called us can call DllMain() if needed.
+	return uiValueA;
+}
+//===============================================================================================//
+#ifndef REFLECTIVEDLLINJECTION_CUSTOM_DLLMAIN
+
+BOOL WINAPI DllMain( HINSTANCE hinstDLL, DWORD dwReason, LPVOID lpReserved )
+{
+    BOOL bReturnValue = TRUE;
+	switch( dwReason ) 
+    { 
+		case DLL_QUERY_HMODULE:
+			if( lpReserved != NULL )
+				*(HMODULE *)lpReserved = hAppInstance;
+			break;
+		case DLL_PROCESS_ATTACH:
+			hAppInstance = hinstDLL;
+			break;
+		case DLL_PROCESS_DETACH:
+		case DLL_THREAD_ATTACH:
+		case DLL_THREAD_DETACH:
+            break;
+    }
+	return bReturnValue;
+}
+
+#endif
+//===============================================================================================//
diff -uNr msf/external/source/ReflectiveDLLInjection/dll/src/ReflectiveLoader.h msf.mod/external/source/ReflectiveDLLInjection/dll/src/ReflectiveLoader.h
--- msf/external/source/ReflectiveDLLInjection/dll/src/ReflectiveLoader.h	1970-01-01 03:00:00.000000000 +0300
+++ msf.mod/external/source/ReflectiveDLLInjection/dll/src/ReflectiveLoader.h	2017-09-12 19:48:24.452970471 +0300
@@ -0,0 +1,203 @@
+//===============================================================================================//
+// Copyright (c) 2012, Stephen Fewer of Harmony Security (www.harmonysecurity.com)
+// All rights reserved.
+// 
+// Redistribution and use in source and binary forms, with or without modification, are permitted 
+// provided that the following conditions are met:
+// 
+//     * Redistributions of source code must retain the above copyright notice, this list of 
+// conditions and the following disclaimer.
+// 
+//     * Redistributions in binary form must reproduce the above copyright notice, this list of 
+// conditions and the following disclaimer in the documentation and/or other materials provided 
+// with the distribution.
+// 
+//     * Neither the name of Harmony Security nor the names of its contributors may be used to
+// endorse or promote products derived from this software without specific prior written permission.
+// 
+// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR 
+// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
+// FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
+// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
+// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
+// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY 
+// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR 
+// OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
+// POSSIBILITY OF SUCH DAMAGE.
+//===============================================================================================//
+#ifndef _REFLECTIVEDLLINJECTION_REFLECTIVELOADER_H
+#define _REFLECTIVEDLLINJECTION_REFLECTIVELOADER_H
+//===============================================================================================//
+#define WIN32_LEAN_AND_MEAN
+#include <windows.h>
+#include <Winsock2.h>
+#include <intrin.h>
+
+#include "ReflectiveDLLInjection.h"
+
+typedef HMODULE (WINAPI * LOADLIBRARYA)( LPCSTR );
+typedef FARPROC (WINAPI * GETPROCADDRESS)( HMODULE, LPCSTR );
+typedef LPVOID  (WINAPI * VIRTUALALLOC)( LPVOID, SIZE_T, DWORD, DWORD );
+typedef DWORD  (NTAPI * NTFLUSHINSTRUCTIONCACHE)( HANDLE, PVOID, ULONG );
+
+#define KERNEL32DLL_HASH				0x6A4ABC5B
+#define NTDLLDLL_HASH					0x3CFA685D
+
+#define LOADLIBRARYA_HASH				0xEC0E4E8E
+#define GETPROCADDRESS_HASH				0x7C0DFCAA
+#define VIRTUALALLOC_HASH				0x91AFCA54
+#define NTFLUSHINSTRUCTIONCACHE_HASH	0x534C0AB8
+
+#define IMAGE_REL_BASED_ARM_MOV32A		5
+#define IMAGE_REL_BASED_ARM_MOV32T		7
+
+#define ARM_MOV_MASK					(DWORD)(0xFBF08000)
+#define ARM_MOV_MASK2					(DWORD)(0xFBF08F00)
+#define ARM_MOVW						0xF2400000
+#define ARM_MOVT						0xF2C00000
+
+#define HASH_KEY						13
+//===============================================================================================//
+#pragma intrinsic( _rotr )
+
+__forceinline DWORD ror( DWORD d )
+{
+	return _rotr( d, HASH_KEY );
+}
+
+__forceinline DWORD hash( char * c )
+{
+    register DWORD h = 0;
+	do
+	{
+		h = ror( h );
+        h += *c;
+	} while( *++c );
+
+    return h;
+}
+//===============================================================================================//
+typedef struct _UNICODE_STR
+{
+  USHORT Length;
+  USHORT MaximumLength;
+  PWSTR pBuffer;
+} UNICODE_STR, *PUNICODE_STR;
+
+// WinDbg> dt -v ntdll!_LDR_DATA_TABLE_ENTRY
+//__declspec( align(8) ) 
+typedef struct _LDR_DATA_TABLE_ENTRY
+{
+	//LIST_ENTRY InLoadOrderLinks; // As we search from PPEB_LDR_DATA->InMemoryOrderModuleList we dont use the first entry.
+	LIST_ENTRY InMemoryOrderModuleList;
+	LIST_ENTRY InInitializationOrderModuleList;
+	PVOID DllBase;
+	PVOID EntryPoint;
+	ULONG SizeOfImage;
+	UNICODE_STR FullDllName;
+	UNICODE_STR BaseDllName;
+	ULONG Flags;
+	SHORT LoadCount;
+	SHORT TlsIndex;
+	LIST_ENTRY HashTableEntry;
+	ULONG TimeDateStamp;
+} LDR_DATA_TABLE_ENTRY, *PLDR_DATA_TABLE_ENTRY;
+
+// WinDbg> dt -v ntdll!_PEB_LDR_DATA
+typedef struct _PEB_LDR_DATA //, 7 elements, 0x28 bytes
+{
+   DWORD dwLength;
+   DWORD dwInitialized;
+   LPVOID lpSsHandle;
+   LIST_ENTRY InLoadOrderModuleList;
+   LIST_ENTRY InMemoryOrderModuleList;
+   LIST_ENTRY InInitializationOrderModuleList;
+   LPVOID lpEntryInProgress;
+} PEB_LDR_DATA, * PPEB_LDR_DATA;
+
+// WinDbg> dt -v ntdll!_PEB_FREE_BLOCK
+typedef struct _PEB_FREE_BLOCK // 2 elements, 0x8 bytes
+{
+   struct _PEB_FREE_BLOCK * pNext;
+   DWORD dwSize;
+} PEB_FREE_BLOCK, * PPEB_FREE_BLOCK;
+
+// struct _PEB is defined in Winternl.h but it is incomplete
+// WinDbg> dt -v ntdll!_PEB
+typedef struct __PEB // 65 elements, 0x210 bytes
+{
+   BYTE bInheritedAddressSpace;
+   BYTE bReadImageFileExecOptions;
+   BYTE bBeingDebugged;
+   BYTE bSpareBool;
+   LPVOID lpMutant;
+   LPVOID lpImageBaseAddress;
+   PPEB_LDR_DATA pLdr;
+   LPVOID lpProcessParameters;
+   LPVOID lpSubSystemData;
+   LPVOID lpProcessHeap;
+   PRTL_CRITICAL_SECTION pFastPebLock;
+   LPVOID lpFastPebLockRoutine;
+   LPVOID lpFastPebUnlockRoutine;
+   DWORD dwEnvironmentUpdateCount;
+   LPVOID lpKernelCallbackTable;
+   DWORD dwSystemReserved;
+   DWORD dwAtlThunkSListPtr32;
+   PPEB_FREE_BLOCK pFreeList;
+   DWORD dwTlsExpansionCounter;
+   LPVOID lpTlsBitmap;
+   DWORD dwTlsBitmapBits[2];
+   LPVOID lpReadOnlySharedMemoryBase;
+   LPVOID lpReadOnlySharedMemoryHeap;
+   LPVOID lpReadOnlyStaticServerData;
+   LPVOID lpAnsiCodePageData;
+   LPVOID lpOemCodePageData;
+   LPVOID lpUnicodeCaseTableData;
+   DWORD dwNumberOfProcessors;
+   DWORD dwNtGlobalFlag;
+   LARGE_INTEGER liCriticalSectionTimeout;
+   DWORD dwHeapSegmentReserve;
+   DWORD dwHeapSegmentCommit;
+   DWORD dwHeapDeCommitTotalFreeThreshold;
+   DWORD dwHeapDeCommitFreeBlockThreshold;
+   DWORD dwNumberOfHeaps;
+   DWORD dwMaximumNumberOfHeaps;
+   LPVOID lpProcessHeaps;
+   LPVOID lpGdiSharedHandleTable;
+   LPVOID lpProcessStarterHelper;
+   DWORD dwGdiDCAttributeList;
+   LPVOID lpLoaderLock;
+   DWORD dwOSMajorVersion;
+   DWORD dwOSMinorVersion;
+   WORD wOSBuildNumber;
+   WORD wOSCSDVersion;
+   DWORD dwOSPlatformId;
+   DWORD dwImageSubsystem;
+   DWORD dwImageSubsystemMajorVersion;
+   DWORD dwImageSubsystemMinorVersion;
+   DWORD dwImageProcessAffinityMask;
+   DWORD dwGdiHandleBuffer[34];
+   LPVOID lpPostProcessInitRoutine;
+   LPVOID lpTlsExpansionBitmap;
+   DWORD dwTlsExpansionBitmapBits[32];
+   DWORD dwSessionId;
+   ULARGE_INTEGER liAppCompatFlags;
+   ULARGE_INTEGER liAppCompatFlagsUser;
+   LPVOID lppShimData;
+   LPVOID lpAppCompatInfo;
+   UNICODE_STR usCSDVersion;
+   LPVOID lpActivationContextData;
+   LPVOID lpProcessAssemblyStorageMap;
+   LPVOID lpSystemDefaultActivationContextData;
+   LPVOID lpSystemAssemblyStorageMap;
+   DWORD dwMinimumStackCommit;
+} _PEB, * _PPEB;
+
+typedef struct
+{
+	WORD	offset:12;
+	WORD	type:4;
+} IMAGE_RELOC, *PIMAGE_RELOC;
+//===============================================================================================//
+#endif
+//===============================================================================================//
diff -uNr msf/external/source/ReflectiveDLLInjection/inject/inject.sln msf.mod/external/source/ReflectiveDLLInjection/inject/inject.sln
--- msf/external/source/ReflectiveDLLInjection/inject/inject.sln	1970-01-01 03:00:00.000000000 +0300
+++ msf.mod/external/source/ReflectiveDLLInjection/inject/inject.sln	2017-09-12 19:48:24.452970471 +0300
@@ -0,0 +1,20 @@
+﻿
+Microsoft Visual Studio Solution File, Format Version 10.00
+# Visual C++ Express 2008
+Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "inject", "inject.vcproj", "{EEF3FD41-05D8-4A07-8434-EF5D34D76335}"
+EndProject
+Global
+	GlobalSection(SolutionConfigurationPlatforms) = preSolution
+		Debug|Win32 = Debug|Win32
+		Release|Win32 = Release|Win32
+	EndGlobalSection
+	GlobalSection(ProjectConfigurationPlatforms) = postSolution
+		{EEF3FD41-05D8-4A07-8434-EF5D34D76335}.Debug|Win32.ActiveCfg = Release|Win32
+		{EEF3FD41-05D8-4A07-8434-EF5D34D76335}.Debug|Win32.Build.0 = Release|Win32
+		{EEF3FD41-05D8-4A07-8434-EF5D34D76335}.Release|Win32.ActiveCfg = Release|Win32
+		{EEF3FD41-05D8-4A07-8434-EF5D34D76335}.Release|Win32.Build.0 = Release|Win32
+	EndGlobalSection
+	GlobalSection(SolutionProperties) = preSolution
+		HideSolutionNode = FALSE
+	EndGlobalSection
+EndGlobal
diff -uNr msf/external/source/ReflectiveDLLInjection/inject/inject.vcproj msf.mod/external/source/ReflectiveDLLInjection/inject/inject.vcproj
--- msf/external/source/ReflectiveDLLInjection/inject/inject.vcproj	1970-01-01 03:00:00.000000000 +0300
+++ msf.mod/external/source/ReflectiveDLLInjection/inject/inject.vcproj	2017-09-12 19:48:24.452970471 +0300
@@ -0,0 +1,360 @@
+<?xml version="1.0" encoding="Windows-1252"?>
+<VisualStudioProject
+	ProjectType="Visual C++"
+	Version="9.00"
+	Name="inject"
+	ProjectGUID="{EEF3FD41-05D8-4A07-8434-EF5D34D76335}"
+	RootNamespace="inject"
+	Keyword="Win32Proj"
+	TargetFrameworkVersion="196613"
+	>
+	<Platforms>
+		<Platform
+			Name="Win32"
+		/>
+		<Platform
+			Name="x64"
+		/>
+	</Platforms>
+	<ToolFiles>
+	</ToolFiles>
+	<Configurations>
+		<Configuration
+			Name="Debug|Win32"
+			OutputDirectory="$(SolutionDir)$(ConfigurationName)"
+			IntermediateDirectory="$(ConfigurationName)"
+			ConfigurationType="1"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				Optimization="0"
+				PreprocessorDefinitions="WIN32;_DEBUG;_CONSOLE"
+				MinimalRebuild="true"
+				BasicRuntimeChecks="3"
+				RuntimeLibrary="3"
+				UsePrecompiledHeader="0"
+				WarningLevel="3"
+				DebugInformationFormat="4"
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLinkerTool"
+				LinkIncremental="2"
+				GenerateDebugInformation="true"
+				SubSystem="1"
+				TargetMachine="1"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCManifestTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCFxCopTool"
+			/>
+			<Tool
+				Name="VCAppVerifierTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+		</Configuration>
+		<Configuration
+			Name="Debug|x64"
+			OutputDirectory="$(SolutionDir)$(PlatformName)\$(ConfigurationName)"
+			IntermediateDirectory="$(PlatformName)\$(ConfigurationName)"
+			ConfigurationType="1"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+				TargetEnvironment="3"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				Optimization="0"
+				PreprocessorDefinitions="WIN32;_DEBUG;_CONSOLE"
+				MinimalRebuild="true"
+				BasicRuntimeChecks="3"
+				RuntimeLibrary="3"
+				UsePrecompiledHeader="0"
+				WarningLevel="3"
+				DebugInformationFormat="3"
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLinkerTool"
+				LinkIncremental="2"
+				GenerateDebugInformation="true"
+				SubSystem="1"
+				TargetMachine="17"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCManifestTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCFxCopTool"
+			/>
+			<Tool
+				Name="VCAppVerifierTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+		</Configuration>
+		<Configuration
+			Name="Release|Win32"
+			OutputDirectory="$(SolutionDir)$(ConfigurationName)"
+			IntermediateDirectory="$(ConfigurationName)"
+			ConfigurationType="1"
+			CharacterSet="2"
+			WholeProgramOptimization="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				Optimization="2"
+				EnableIntrinsicFunctions="true"
+				PreprocessorDefinitions="WIN32;NDEBUG;_CONSOLE"
+				RuntimeLibrary="0"
+				EnableFunctionLevelLinking="true"
+				UsePrecompiledHeader="0"
+				WarningLevel="3"
+				DebugInformationFormat="3"
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLinkerTool"
+				LinkIncremental="1"
+				GenerateDebugInformation="true"
+				SubSystem="1"
+				OptimizeReferences="2"
+				EnableCOMDATFolding="2"
+				TargetMachine="1"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCManifestTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCFxCopTool"
+			/>
+			<Tool
+				Name="VCAppVerifierTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+				CommandLine="copy ..\Release\inject.exe ..\bin\"
+			/>
+		</Configuration>
+		<Configuration
+			Name="Release|x64"
+			OutputDirectory="$(SolutionDir)$(PlatformName)\$(ConfigurationName)"
+			IntermediateDirectory="$(PlatformName)\$(ConfigurationName)"
+			ConfigurationType="1"
+			CharacterSet="2"
+			WholeProgramOptimization="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+				TargetEnvironment="3"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				Optimization="2"
+				EnableIntrinsicFunctions="true"
+				PreprocessorDefinitions="WIN64;NDEBUG;_CONSOLE;_WIN64"
+				RuntimeLibrary="0"
+				EnableFunctionLevelLinking="true"
+				UsePrecompiledHeader="0"
+				WarningLevel="3"
+				DebugInformationFormat="3"
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLinkerTool"
+				OutputFile="$(OutDir)\inject.x64.exe"
+				LinkIncremental="1"
+				GenerateDebugInformation="true"
+				SubSystem="1"
+				OptimizeReferences="2"
+				EnableCOMDATFolding="2"
+				TargetMachine="17"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCManifestTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCFxCopTool"
+			/>
+			<Tool
+				Name="VCAppVerifierTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+				CommandLine="copy ..\x64\Release\inject.x64.exe ..\bin\"
+			/>
+		</Configuration>
+	</Configurations>
+	<References>
+	</References>
+	<Files>
+		<Filter
+			Name="Source Files"
+			Filter="cpp;c;cc;cxx;def;odl;idl;hpj;bat;asm;asmx"
+			UniqueIdentifier="{4FC737F1-C7A5-4376-A066-2A32D752A2FF}"
+			>
+			<File
+				RelativePath=".\src\GetProcAddressR.c"
+				>
+			</File>
+			<File
+				RelativePath=".\src\Inject.c"
+				>
+			</File>
+			<File
+				RelativePath=".\src\LoadLibraryR.c"
+				>
+			</File>
+		</Filter>
+		<Filter
+			Name="Header Files"
+			Filter="h;hpp;hxx;hm;inl;inc;xsd"
+			UniqueIdentifier="{93995380-89BD-4b04-88EB-625FBE52EBFB}"
+			>
+			<File
+				RelativePath=".\src\GetProcAddressR.h"
+				>
+			</File>
+			<File
+				RelativePath=".\src\LoadLibraryR.h"
+				>
+			</File>
+			<File
+				RelativePath=".\src\ReflectiveDLLInjection.h"
+				>
+			</File>
+		</Filter>
+	</Files>
+	<Globals>
+	</Globals>
+</VisualStudioProject>
diff -uNr msf/external/source/ReflectiveDLLInjection/inject/inject.vcxproj msf.mod/external/source/ReflectiveDLLInjection/inject/inject.vcxproj
--- msf/external/source/ReflectiveDLLInjection/inject/inject.vcxproj	1970-01-01 03:00:00.000000000 +0300
+++ msf.mod/external/source/ReflectiveDLLInjection/inject/inject.vcxproj	2017-09-12 19:48:24.452970471 +0300
@@ -0,0 +1,258 @@
+﻿<?xml version="1.0" encoding="utf-8"?>
+<Project DefaultTargets="Build" ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <ItemGroup Label="ProjectConfigurations">
+    <ProjectConfiguration Include="Debug|ARM">
+      <Configuration>Debug</Configuration>
+      <Platform>ARM</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="Debug|Win32">
+      <Configuration>Debug</Configuration>
+      <Platform>Win32</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="Debug|x64">
+      <Configuration>Debug</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="Release|ARM">
+      <Configuration>Release</Configuration>
+      <Platform>ARM</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="Release|Win32">
+      <Configuration>Release</Configuration>
+      <Platform>Win32</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="Release|x64">
+      <Configuration>Release</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+  </ItemGroup>
+  <PropertyGroup Label="Globals">
+    <ProjectGuid>{EEF3FD41-05D8-4A07-8434-EF5D34D76335}</ProjectGuid>
+    <RootNamespace>inject</RootNamespace>
+    <Keyword>Win32Proj</Keyword>
+  </PropertyGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'" Label="Configuration">
+    <ConfigurationType>Application</ConfigurationType>
+    <PlatformToolset>v110</PlatformToolset>
+    <CharacterSet>MultiByte</CharacterSet>
+    <WholeProgramOptimization>true</WholeProgramOptimization>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|ARM'" Label="Configuration">
+    <ConfigurationType>Application</ConfigurationType>
+    <PlatformToolset>v110</PlatformToolset>
+    <CharacterSet>MultiByte</CharacterSet>
+    <WholeProgramOptimization>true</WholeProgramOptimization>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'" Label="Configuration">
+    <ConfigurationType>Application</ConfigurationType>
+    <PlatformToolset>v110</PlatformToolset>
+    <CharacterSet>Unicode</CharacterSet>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|ARM'" Label="Configuration">
+    <ConfigurationType>Application</ConfigurationType>
+    <PlatformToolset>v110</PlatformToolset>
+    <CharacterSet>Unicode</CharacterSet>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
+    <ConfigurationType>Application</ConfigurationType>
+    <PlatformToolset>v110</PlatformToolset>
+    <CharacterSet>MultiByte</CharacterSet>
+    <WholeProgramOptimization>true</WholeProgramOptimization>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'" Label="Configuration">
+    <ConfigurationType>Application</ConfigurationType>
+    <PlatformToolset>v110</PlatformToolset>
+    <CharacterSet>Unicode</CharacterSet>
+  </PropertyGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
+  <ImportGroup Label="ExtensionSettings">
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release|ARM'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Debug|ARM'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+  </ImportGroup>
+  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'" Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+  </ImportGroup>
+  <PropertyGroup Label="UserMacros" />
+  <PropertyGroup>
+    <_ProjectFileVersion>11.0.50727.1</_ProjectFileVersion>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
+    <OutDir>$(SolutionDir)$(Configuration)\</OutDir>
+    <IntDir>$(Configuration)\</IntDir>
+    <LinkIncremental>true</LinkIncremental>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|ARM'">
+    <LinkIncremental>true</LinkIncremental>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
+    <OutDir>$(SolutionDir)$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(Platform)\$(Configuration)\</IntDir>
+    <LinkIncremental>true</LinkIncremental>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
+    <OutDir>$(SolutionDir)$(Configuration)\</OutDir>
+    <IntDir>$(Configuration)\</IntDir>
+    <LinkIncremental>false</LinkIncremental>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|ARM'">
+    <LinkIncremental>false</LinkIncremental>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+    <OutDir>$(SolutionDir)$(Platform)\$(Configuration)\</OutDir>
+    <IntDir>$(Platform)\$(Configuration)\</IntDir>
+    <LinkIncremental>false</LinkIncremental>
+  </PropertyGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
+    <ClCompile>
+      <Optimization>Disabled</Optimization>
+      <PreprocessorDefinitions>WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <MinimalRebuild>true</MinimalRebuild>
+      <BasicRuntimeChecks>EnableFastChecks</BasicRuntimeChecks>
+      <RuntimeLibrary>MultiThreadedDebugDLL</RuntimeLibrary>
+      <PrecompiledHeader />
+      <WarningLevel>Level3</WarningLevel>
+      <DebugInformationFormat>EditAndContinue</DebugInformationFormat>
+    </ClCompile>
+    <Link>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+      <SubSystem>Console</SubSystem>
+      <TargetMachine>MachineX86</TargetMachine>
+    </Link>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|ARM'">
+    <ClCompile>
+      <Optimization>Disabled</Optimization>
+      <PreprocessorDefinitions>WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <MinimalRebuild>true</MinimalRebuild>
+      <BasicRuntimeChecks>EnableFastChecks</BasicRuntimeChecks>
+      <RuntimeLibrary>MultiThreadedDebugDLL</RuntimeLibrary>
+      <PrecompiledHeader>
+      </PrecompiledHeader>
+      <WarningLevel>Level3</WarningLevel>
+      <DebugInformationFormat>EditAndContinue</DebugInformationFormat>
+    </ClCompile>
+    <Link>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+      <SubSystem>Console</SubSystem>
+    </Link>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
+    <Midl>
+      <TargetEnvironment>X64</TargetEnvironment>
+    </Midl>
+    <ClCompile>
+      <Optimization>Disabled</Optimization>
+      <PreprocessorDefinitions>WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <MinimalRebuild>true</MinimalRebuild>
+      <BasicRuntimeChecks>EnableFastChecks</BasicRuntimeChecks>
+      <RuntimeLibrary>MultiThreadedDebugDLL</RuntimeLibrary>
+      <PrecompiledHeader />
+      <WarningLevel>Level3</WarningLevel>
+      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
+    </ClCompile>
+    <Link>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+      <SubSystem>Console</SubSystem>
+      <TargetMachine>MachineX64</TargetMachine>
+    </Link>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
+    <ClCompile>
+      <Optimization>MaxSpeed</Optimization>
+      <IntrinsicFunctions>true</IntrinsicFunctions>
+      <PreprocessorDefinitions>WIN32;NDEBUG;_CONSOLE;WIN_X86;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <RuntimeLibrary>MultiThreaded</RuntimeLibrary>
+      <FunctionLevelLinking>true</FunctionLevelLinking>
+      <PrecompiledHeader />
+      <WarningLevel>Level3</WarningLevel>
+      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
+    </ClCompile>
+    <Link>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+      <SubSystem>Console</SubSystem>
+      <OptimizeReferences>true</OptimizeReferences>
+      <EnableCOMDATFolding>true</EnableCOMDATFolding>
+      <TargetMachine>MachineX86</TargetMachine>
+    </Link>
+    <PostBuildEvent>
+      <Command>copy ..\Release\inject.exe ..\bin\</Command>
+    </PostBuildEvent>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|ARM'">
+    <ClCompile>
+      <Optimization>MaxSpeed</Optimization>
+      <IntrinsicFunctions>true</IntrinsicFunctions>
+      <PreprocessorDefinitions>WIN32;NDEBUG;_CONSOLE;WIN_ARM;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <RuntimeLibrary>MultiThreaded</RuntimeLibrary>
+      <FunctionLevelLinking>true</FunctionLevelLinking>
+      <PrecompiledHeader>
+      </PrecompiledHeader>
+      <WarningLevel>Level3</WarningLevel>
+      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
+    </ClCompile>
+    <Link>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+      <SubSystem>Console</SubSystem>
+      <OptimizeReferences>true</OptimizeReferences>
+      <EnableCOMDATFolding>true</EnableCOMDATFolding>
+      <OutputFile>$(OutDir)inject.arm.exe</OutputFile>
+      <AdditionalDependencies>%(AdditionalDependencies)</AdditionalDependencies>
+    </Link>
+    <PostBuildEvent>
+      <Command>copy ..\ARM\Release\inject.arm.exe ..\bin\</Command>
+    </PostBuildEvent>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+    <Midl>
+      <TargetEnvironment>X64</TargetEnvironment>
+    </Midl>
+    <ClCompile>
+      <Optimization>MaxSpeed</Optimization>
+      <IntrinsicFunctions>true</IntrinsicFunctions>
+      <PreprocessorDefinitions>WIN64;NDEBUG;_CONSOLE;_WIN64;WIN_X64;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <RuntimeLibrary>MultiThreaded</RuntimeLibrary>
+      <FunctionLevelLinking>true</FunctionLevelLinking>
+      <PrecompiledHeader />
+      <WarningLevel>Level3</WarningLevel>
+      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
+    </ClCompile>
+    <Link>
+      <OutputFile>$(OutDir)inject.x64.exe</OutputFile>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+      <SubSystem>Console</SubSystem>
+      <OptimizeReferences>true</OptimizeReferences>
+      <EnableCOMDATFolding>true</EnableCOMDATFolding>
+      <TargetMachine>MachineX64</TargetMachine>
+    </Link>
+    <PostBuildEvent>
+      <Command>copy ..\x64\Release\inject.x64.exe ..\bin\</Command>
+    </PostBuildEvent>
+  </ItemDefinitionGroup>
+  <ItemGroup>
+    <ClCompile Include="src\GetProcAddressR.c" />
+    <ClCompile Include="src\Inject.c" />
+    <ClCompile Include="src\LoadLibraryR.c" />
+  </ItemGroup>
+  <ItemGroup>
+    <ClInclude Include="src\GetProcAddressR.h" />
+    <ClInclude Include="src\LoadLibraryR.h" />
+    <ClInclude Include="src\ReflectiveDLLInjection.h" />
+  </ItemGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
+  <ImportGroup Label="ExtensionTargets">
+  </ImportGroup>
+</Project>
\ No newline at end of file
diff -uNr msf/external/source/ReflectiveDLLInjection/inject/inject.vcxproj.filters msf.mod/external/source/ReflectiveDLLInjection/inject/inject.vcxproj.filters
--- msf/external/source/ReflectiveDLLInjection/inject/inject.vcxproj.filters	1970-01-01 03:00:00.000000000 +0300
+++ msf.mod/external/source/ReflectiveDLLInjection/inject/inject.vcxproj.filters	2017-09-12 19:48:24.452970471 +0300
@@ -0,0 +1,35 @@
+﻿<?xml version="1.0" encoding="utf-8"?>
+<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <ItemGroup>
+    <Filter Include="Source Files">
+      <UniqueIdentifier>{4FC737F1-C7A5-4376-A066-2A32D752A2FF}</UniqueIdentifier>
+      <Extensions>cpp;c;cc;cxx;def;odl;idl;hpj;bat;asm;asmx</Extensions>
+    </Filter>
+    <Filter Include="Header Files">
+      <UniqueIdentifier>{93995380-89BD-4b04-88EB-625FBE52EBFB}</UniqueIdentifier>
+      <Extensions>h;hpp;hxx;hm;inl;inc;xsd</Extensions>
+    </Filter>
+  </ItemGroup>
+  <ItemGroup>
+    <ClCompile Include="src\GetProcAddressR.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="src\Inject.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+    <ClCompile Include="src\LoadLibraryR.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+  </ItemGroup>
+  <ItemGroup>
+    <ClInclude Include="src\GetProcAddressR.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="src\LoadLibraryR.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="src\ReflectiveDLLInjection.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+  </ItemGroup>
+</Project>
\ No newline at end of file
diff -uNr msf/external/source/ReflectiveDLLInjection/inject/src/GetProcAddressR.c msf.mod/external/source/ReflectiveDLLInjection/inject/src/GetProcAddressR.c
--- msf/external/source/ReflectiveDLLInjection/inject/src/GetProcAddressR.c	1970-01-01 03:00:00.000000000 +0300
+++ msf.mod/external/source/ReflectiveDLLInjection/inject/src/GetProcAddressR.c	2017-09-12 19:48:24.452970471 +0300
@@ -0,0 +1,116 @@
+//===============================================================================================//
+// Copyright (c) 2012, Stephen Fewer of Harmony Security (www.harmonysecurity.com)
+// All rights reserved.
+// 
+// Redistribution and use in source and binary forms, with or without modification, are permitted 
+// provided that the following conditions are met:
+// 
+//     * Redistributions of source code must retain the above copyright notice, this list of 
+// conditions and the following disclaimer.
+// 
+//     * Redistributions in binary form must reproduce the above copyright notice, this list of 
+// conditions and the following disclaimer in the documentation and/or other materials provided 
+// with the distribution.
+// 
+//     * Neither the name of Harmony Security nor the names of its contributors may be used to
+// endorse or promote products derived from this software without specific prior written permission.
+// 
+// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR 
+// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
+// FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
+// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
+// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
+// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY 
+// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR 
+// OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
+// POSSIBILITY OF SUCH DAMAGE.
+//===============================================================================================//
+#include "GetProcAddressR.h"
+//===============================================================================================//
+// We implement a minimal GetProcAddress to avoid using the native kernel32!GetProcAddress which
+// wont be able to resolve exported addresses in reflectivly loaded librarys.
+FARPROC WINAPI GetProcAddressR( HANDLE hModule, LPCSTR lpProcName )
+{
+	UINT_PTR uiLibraryAddress = 0;
+	FARPROC fpResult          = NULL;
+
+	if( hModule == NULL )
+		return NULL;
+
+	// a module handle is really its base address
+	uiLibraryAddress = (UINT_PTR)hModule;
+
+	__try
+	{
+		UINT_PTR uiAddressArray = 0;
+		UINT_PTR uiNameArray    = 0;
+		UINT_PTR uiNameOrdinals = 0;
+		PIMAGE_NT_HEADERS pNtHeaders             = NULL;
+		PIMAGE_DATA_DIRECTORY pDataDirectory     = NULL;
+		PIMAGE_EXPORT_DIRECTORY pExportDirectory = NULL;
+			
+		// get the VA of the modules NT Header
+		pNtHeaders = (PIMAGE_NT_HEADERS)(uiLibraryAddress + ((PIMAGE_DOS_HEADER)uiLibraryAddress)->e_lfanew);
+
+		pDataDirectory = (PIMAGE_DATA_DIRECTORY)&pNtHeaders->OptionalHeader.DataDirectory[ IMAGE_DIRECTORY_ENTRY_EXPORT ];
+
+		// get the VA of the export directory
+		pExportDirectory = (PIMAGE_EXPORT_DIRECTORY)( uiLibraryAddress + pDataDirectory->VirtualAddress );
+			
+		// get the VA for the array of addresses
+		uiAddressArray = ( uiLibraryAddress + pExportDirectory->AddressOfFunctions );
+
+		// get the VA for the array of name pointers
+		uiNameArray = ( uiLibraryAddress + pExportDirectory->AddressOfNames );
+				
+		// get the VA for the array of name ordinals
+		uiNameOrdinals = ( uiLibraryAddress + pExportDirectory->AddressOfNameOrdinals );
+
+		// test if we are importing by name or by ordinal...
+		if( ((DWORD)lpProcName & 0xFFFF0000 ) == 0x00000000 )
+		{
+			// import by ordinal...
+
+			// use the import ordinal (- export ordinal base) as an index into the array of addresses
+			uiAddressArray += ( ( IMAGE_ORDINAL( (DWORD)lpProcName ) - pExportDirectory->Base ) * sizeof(DWORD) );
+
+			// resolve the address for this imported function
+			fpResult = (FARPROC)( uiLibraryAddress + DEREF_32(uiAddressArray) );
+		}
+		else
+		{
+			// import by name...
+			DWORD dwCounter = pExportDirectory->NumberOfNames;
+			while( dwCounter-- )
+			{
+				char * cpExportedFunctionName = (char *)(uiLibraryAddress + DEREF_32( uiNameArray ));
+				
+				// test if we have a match...
+				if( strcmp( cpExportedFunctionName, lpProcName ) == 0 )
+				{
+					// use the functions name ordinal as an index into the array of name pointers
+					uiAddressArray += ( DEREF_16( uiNameOrdinals ) * sizeof(DWORD) );
+					
+					// calculate the virtual address for the function
+					fpResult = (FARPROC)(uiLibraryAddress + DEREF_32( uiAddressArray ));
+					
+					// finish...
+					break;
+				}
+						
+				// get the next exported function name
+				uiNameArray += sizeof(DWORD);
+
+				// get the next exported function name ordinal
+				uiNameOrdinals += sizeof(WORD);
+			}
+		}
+	}
+	__except( EXCEPTION_EXECUTE_HANDLER )
+	{
+		fpResult = NULL;
+	}
+
+	return fpResult;
+}
+//===============================================================================================//
\ No newline at end of file
diff -uNr msf/external/source/ReflectiveDLLInjection/inject/src/GetProcAddressR.h msf.mod/external/source/ReflectiveDLLInjection/inject/src/GetProcAddressR.h
--- msf/external/source/ReflectiveDLLInjection/inject/src/GetProcAddressR.h	1970-01-01 03:00:00.000000000 +0300
+++ msf.mod/external/source/ReflectiveDLLInjection/inject/src/GetProcAddressR.h	2017-09-12 19:48:24.462970471 +0300
@@ -0,0 +1,36 @@
+//===============================================================================================//
+// Copyright (c) 2012, Stephen Fewer of Harmony Security (www.harmonysecurity.com)
+// All rights reserved.
+// 
+// Redistribution and use in source and binary forms, with or without modification, are permitted 
+// provided that the following conditions are met:
+// 
+//     * Redistributions of source code must retain the above copyright notice, this list of 
+// conditions and the following disclaimer.
+// 
+//     * Redistributions in binary form must reproduce the above copyright notice, this list of 
+// conditions and the following disclaimer in the documentation and/or other materials provided 
+// with the distribution.
+// 
+//     * Neither the name of Harmony Security nor the names of its contributors may be used to
+// endorse or promote products derived from this software without specific prior written permission.
+// 
+// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR 
+// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
+// FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
+// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
+// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
+// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY 
+// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR 
+// OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
+// POSSIBILITY OF SUCH DAMAGE.
+//===============================================================================================//
+#ifndef _REFLECTIVEDLLINJECTION_GETPROCADDRESSR_H
+#define _REFLECTIVEDLLINJECTION_GETPROCADDRESSR_H
+//===============================================================================================//
+#include "ReflectiveDLLInjection.h"
+
+FARPROC WINAPI GetProcAddressR( HANDLE hModule, LPCSTR lpProcName );
+//===============================================================================================//
+#endif
+//===============================================================================================//
diff -uNr msf/external/source/ReflectiveDLLInjection/inject/src/Inject.c msf.mod/external/source/ReflectiveDLLInjection/inject/src/Inject.c
--- msf/external/source/ReflectiveDLLInjection/inject/src/Inject.c	1970-01-01 03:00:00.000000000 +0300
+++ msf.mod/external/source/ReflectiveDLLInjection/inject/src/Inject.c	2017-09-12 19:48:24.462970471 +0300
@@ -0,0 +1,120 @@
+//===============================================================================================//
+// Copyright (c) 2012, Stephen Fewer of Harmony Security (www.harmonysecurity.com)
+// All rights reserved.
+// 
+// Redistribution and use in source and binary forms, with or without modification, are permitted 
+// provided that the following conditions are met:
+// 
+//     * Redistributions of source code must retain the above copyright notice, this list of 
+// conditions and the following disclaimer.
+// 
+//     * Redistributions in binary form must reproduce the above copyright notice, this list of 
+// conditions and the following disclaimer in the documentation and/or other materials provided 
+// with the distribution.
+// 
+//     * Neither the name of Harmony Security nor the names of its contributors may be used to
+// endorse or promote products derived from this software without specific prior written permission.
+// 
+// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR 
+// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
+// FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
+// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
+// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
+// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY 
+// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR 
+// OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
+// POSSIBILITY OF SUCH DAMAGE.
+//===============================================================================================//
+#define WIN32_LEAN_AND_MEAN
+#include <windows.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include "LoadLibraryR.h"
+
+#pragma comment(lib,"Advapi32.lib")
+
+#define BREAK_WITH_ERROR( e ) { printf( "[-] %s. Error=%d", e, GetLastError() ); break; }
+
+// Simple app to inject a reflective DLL into a process vis its process ID.
+int main( int argc, char * argv[] )
+{
+	HANDLE hFile          = NULL;
+	HANDLE hModule        = NULL;
+	HANDLE hProcess       = NULL;
+	HANDLE hToken         = NULL;
+	LPVOID lpBuffer       = NULL;
+	DWORD dwLength        = 0;
+	DWORD dwBytesRead     = 0;
+	DWORD dwProcessId     = 0;
+	TOKEN_PRIVILEGES priv = {0};
+
+#ifdef WIN_X64
+	char * cpDllFile  = "reflective_dll.x64.dll";
+#else
+#ifdef WIN_X86
+	char * cpDllFile  = "reflective_dll.dll";
+#else WIN_ARM
+	char * cpDllFile  = "reflective_dll.arm.dll";
+#endif
+#endif
+
+	do
+	{
+		// Usage: inject.exe [pid] [dll_file]
+
+		if( argc == 1 )
+			dwProcessId = GetCurrentProcessId();
+		else
+			dwProcessId = atoi( argv[1] );
+
+		if( argc >= 3 )
+			cpDllFile = argv[2];
+
+		hFile = CreateFileA( cpDllFile, GENERIC_READ, 0, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL );
+		if( hFile == INVALID_HANDLE_VALUE )
+			BREAK_WITH_ERROR( "Failed to open the DLL file" );
+
+		dwLength = GetFileSize( hFile, NULL );
+		if( dwLength == INVALID_FILE_SIZE || dwLength == 0 )
+			BREAK_WITH_ERROR( "Failed to get the DLL file size" );
+
+		lpBuffer = HeapAlloc( GetProcessHeap(), 0, dwLength );
+		if( !lpBuffer )
+			BREAK_WITH_ERROR( "Failed to get the DLL file size" );
+
+		if( ReadFile( hFile, lpBuffer, dwLength, &dwBytesRead, NULL ) == FALSE )
+			BREAK_WITH_ERROR( "Failed to alloc a buffer!" );
+
+		if( OpenProcessToken( GetCurrentProcess(), TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY, &hToken ) )
+		{
+			priv.PrivilegeCount           = 1;
+			priv.Privileges[0].Attributes = SE_PRIVILEGE_ENABLED;
+		
+			if( LookupPrivilegeValue( NULL, SE_DEBUG_NAME, &priv.Privileges[0].Luid ) )
+				AdjustTokenPrivileges( hToken, FALSE, &priv, 0, NULL, NULL );
+
+			CloseHandle( hToken );
+		}
+
+		hProcess = OpenProcess( PROCESS_CREATE_THREAD | PROCESS_QUERY_INFORMATION | PROCESS_VM_OPERATION | PROCESS_VM_WRITE | PROCESS_VM_READ, FALSE, dwProcessId );
+		if( !hProcess )
+			BREAK_WITH_ERROR( "Failed to open the target process" );
+
+		hModule = LoadRemoteLibraryR( hProcess, lpBuffer, dwLength, NULL );
+		if( !hModule )
+			BREAK_WITH_ERROR( "Failed to inject the DLL" );
+
+		printf( "[+] Injected the '%s' DLL into process %d.", cpDllFile, dwProcessId );
+		
+		WaitForSingleObject( hModule, -1 );
+
+	} while( 0 );
+
+	if( lpBuffer )
+		HeapFree( GetProcessHeap(), 0, lpBuffer );
+
+	if( hProcess )
+		CloseHandle( hProcess );
+
+	return 0;
+}
\ No newline at end of file
diff -uNr msf/external/source/ReflectiveDLLInjection/inject/src/LoadLibraryR.c msf.mod/external/source/ReflectiveDLLInjection/inject/src/LoadLibraryR.c
--- msf/external/source/ReflectiveDLLInjection/inject/src/LoadLibraryR.c	1970-01-01 03:00:00.000000000 +0300
+++ msf.mod/external/source/ReflectiveDLLInjection/inject/src/LoadLibraryR.c	2017-09-12 19:48:24.462970471 +0300
@@ -0,0 +1,234 @@
+//===============================================================================================//
+// Copyright (c) 2012, Stephen Fewer of Harmony Security (www.harmonysecurity.com)
+// All rights reserved.
+// 
+// Redistribution and use in source and binary forms, with or without modification, are permitted 
+// provided that the following conditions are met:
+// 
+//     * Redistributions of source code must retain the above copyright notice, this list of 
+// conditions and the following disclaimer.
+// 
+//     * Redistributions in binary form must reproduce the above copyright notice, this list of 
+// conditions and the following disclaimer in the documentation and/or other materials provided 
+// with the distribution.
+// 
+//     * Neither the name of Harmony Security nor the names of its contributors may be used to
+// endorse or promote products derived from this software without specific prior written permission.
+// 
+// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR 
+// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
+// FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
+// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
+// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
+// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY 
+// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR 
+// OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
+// POSSIBILITY OF SUCH DAMAGE.
+//===============================================================================================//
+#include "LoadLibraryR.h"
+#include <stdio.h>
+//===============================================================================================//
+DWORD Rva2Offset( DWORD dwRva, UINT_PTR uiBaseAddress )
+{    
+	WORD wIndex                          = 0;
+	PIMAGE_SECTION_HEADER pSectionHeader = NULL;
+	PIMAGE_NT_HEADERS pNtHeaders         = NULL;
+	
+	pNtHeaders = (PIMAGE_NT_HEADERS)(uiBaseAddress + ((PIMAGE_DOS_HEADER)uiBaseAddress)->e_lfanew);
+
+	pSectionHeader = (PIMAGE_SECTION_HEADER)((UINT_PTR)(&pNtHeaders->OptionalHeader) + pNtHeaders->FileHeader.SizeOfOptionalHeader);
+
+    if( dwRva < pSectionHeader[0].PointerToRawData )
+        return dwRva;
+
+    for( wIndex=0 ; wIndex < pNtHeaders->FileHeader.NumberOfSections ; wIndex++ )
+    {   
+        if( dwRva >= pSectionHeader[wIndex].VirtualAddress && dwRva < (pSectionHeader[wIndex].VirtualAddress + pSectionHeader[wIndex].SizeOfRawData) )           
+           return ( dwRva - pSectionHeader[wIndex].VirtualAddress + pSectionHeader[wIndex].PointerToRawData );
+    }
+    
+    return 0;
+}
+//===============================================================================================//
+DWORD GetReflectiveLoaderOffset( VOID * lpReflectiveDllBuffer )
+{
+	UINT_PTR uiBaseAddress   = 0;
+	UINT_PTR uiExportDir     = 0;
+	UINT_PTR uiNameArray     = 0;
+	UINT_PTR uiAddressArray  = 0;
+	UINT_PTR uiNameOrdinals  = 0;
+	DWORD dwCounter          = 0;
+#ifdef WIN_X64
+	DWORD dwCompiledArch = 2;
+#else
+	// This will catch Win32 and WinRT.
+	DWORD dwCompiledArch = 1;
+#endif
+
+	uiBaseAddress = (UINT_PTR)lpReflectiveDllBuffer;
+
+	// get the File Offset of the modules NT Header
+	uiExportDir = uiBaseAddress + ((PIMAGE_DOS_HEADER)uiBaseAddress)->e_lfanew;
+
+	// currenlty we can only process a PE file which is the same type as the one this fuction has  
+	// been compiled as, due to various offset in the PE structures being defined at compile time.
+	if( ((PIMAGE_NT_HEADERS)uiExportDir)->OptionalHeader.Magic == 0x010B ) // PE32
+	{
+		if( dwCompiledArch != 1 )
+			return 0;
+	}
+	else if( ((PIMAGE_NT_HEADERS)uiExportDir)->OptionalHeader.Magic == 0x020B ) // PE64
+	{
+		if( dwCompiledArch != 2 )
+			return 0;
+	}
+	else
+	{
+		return 0;
+	}
+
+	// uiNameArray = the address of the modules export directory entry
+	uiNameArray = (UINT_PTR)&((PIMAGE_NT_HEADERS)uiExportDir)->OptionalHeader.DataDirectory[ IMAGE_DIRECTORY_ENTRY_EXPORT ];
+
+	// get the File Offset of the export directory
+	uiExportDir = uiBaseAddress + Rva2Offset( ((PIMAGE_DATA_DIRECTORY)uiNameArray)->VirtualAddress, uiBaseAddress );
+
+	// get the File Offset for the array of name pointers
+	uiNameArray = uiBaseAddress + Rva2Offset( ((PIMAGE_EXPORT_DIRECTORY )uiExportDir)->AddressOfNames, uiBaseAddress );
+
+	// get the File Offset for the array of addresses
+	uiAddressArray = uiBaseAddress + Rva2Offset( ((PIMAGE_EXPORT_DIRECTORY )uiExportDir)->AddressOfFunctions, uiBaseAddress );
+
+	// get the File Offset for the array of name ordinals
+	uiNameOrdinals = uiBaseAddress + Rva2Offset( ((PIMAGE_EXPORT_DIRECTORY )uiExportDir)->AddressOfNameOrdinals, uiBaseAddress );	
+
+	// get a counter for the number of exported functions...
+	dwCounter = ((PIMAGE_EXPORT_DIRECTORY )uiExportDir)->NumberOfNames;
+
+	// loop through all the exported functions to find the ReflectiveLoader
+	while( dwCounter-- )
+	{
+		char * cpExportedFunctionName = (char *)(uiBaseAddress + Rva2Offset( DEREF_32( uiNameArray ), uiBaseAddress ));
+
+		if( strstr( cpExportedFunctionName, "ReflectiveLoader" ) != NULL )
+		{
+			// get the File Offset for the array of addresses
+			uiAddressArray = uiBaseAddress + Rva2Offset( ((PIMAGE_EXPORT_DIRECTORY )uiExportDir)->AddressOfFunctions, uiBaseAddress );	
+	
+			// use the functions name ordinal as an index into the array of name pointers
+			uiAddressArray += ( DEREF_16( uiNameOrdinals ) * sizeof(DWORD) );
+
+			// return the File Offset to the ReflectiveLoader() functions code...
+			return Rva2Offset( DEREF_32( uiAddressArray ), uiBaseAddress );
+		}
+		// get the next exported function name
+		uiNameArray += sizeof(DWORD);
+
+		// get the next exported function name ordinal
+		uiNameOrdinals += sizeof(WORD);
+	}
+
+	return 0;
+}
+//===============================================================================================//
+// Loads a DLL image from memory via its exported ReflectiveLoader function
+HMODULE WINAPI LoadLibraryR( LPVOID lpBuffer, DWORD dwLength )
+{
+	HMODULE hResult                    = NULL;
+	DWORD dwReflectiveLoaderOffset     = 0;
+	DWORD dwOldProtect1                = 0;
+	DWORD dwOldProtect2                = 0;
+	REFLECTIVELOADER pReflectiveLoader = NULL;
+	DLLMAIN pDllMain                   = NULL;
+
+	if( lpBuffer == NULL || dwLength == 0 )
+		return NULL;
+
+	__try
+	{
+		// check if the library has a ReflectiveLoader...
+		dwReflectiveLoaderOffset = GetReflectiveLoaderOffset( lpBuffer );
+		if( dwReflectiveLoaderOffset != 0 )
+		{
+			pReflectiveLoader = (REFLECTIVELOADER)((UINT_PTR)lpBuffer + dwReflectiveLoaderOffset);
+
+			// we must VirtualProtect the buffer to RWX so we can execute the ReflectiveLoader...
+			// this assumes lpBuffer is the base address of the region of pages and dwLength the size of the region
+			if( VirtualProtect( lpBuffer, dwLength, PAGE_EXECUTE_READWRITE, &dwOldProtect1 ) )
+			{
+				// call the librarys ReflectiveLoader...
+				pDllMain = (DLLMAIN)pReflectiveLoader();
+				if( pDllMain != NULL )
+				{
+					// call the loaded librarys DllMain to get its HMODULE
+					if( !pDllMain( NULL, DLL_QUERY_HMODULE, &hResult ) )	
+						hResult = NULL;
+				}
+				// revert to the previous protection flags...
+				VirtualProtect( lpBuffer, dwLength, dwOldProtect1, &dwOldProtect2 );
+			}
+		}
+	}
+	__except( EXCEPTION_EXECUTE_HANDLER )
+	{
+		hResult = NULL;
+	}
+
+	return hResult;
+}
+//===============================================================================================//
+// Loads a PE image from memory into the address space of a host process via the image's exported ReflectiveLoader function
+// Note: You must compile whatever you are injecting with REFLECTIVEDLLINJECTION_VIA_LOADREMOTELIBRARYR 
+//       defined in order to use the correct RDI prototypes.
+// Note: The hProcess handle must have these access rights: PROCESS_CREATE_THREAD | PROCESS_QUERY_INFORMATION | 
+//       PROCESS_VM_OPERATION | PROCESS_VM_WRITE | PROCESS_VM_READ
+// Note: If you are passing in an lpParameter value, if it is a pointer, remember it is for a different address space.
+// Note: This function currently cant inject accross architectures, but only to architectures which are the 
+//       same as the arch this function is compiled as, e.g. x86->x86 and x64->x64 but not x64->x86 or x86->x64.
+HANDLE WINAPI LoadRemoteLibraryR( HANDLE hProcess, LPVOID lpBuffer, DWORD dwLength, LPVOID lpParameter )
+{
+	BOOL bSuccess                             = FALSE;
+	LPVOID lpRemoteLibraryBuffer              = NULL;
+	LPTHREAD_START_ROUTINE lpReflectiveLoader = NULL;
+	HANDLE hThread                            = NULL;
+	DWORD dwReflectiveLoaderOffset            = 0;
+	DWORD dwThreadId                          = 0;
+
+	__try
+	{
+		do
+		{
+			if( !hProcess  || !lpBuffer || !dwLength )
+				break;
+
+			// check if the library has a ReflectiveLoader...
+			dwReflectiveLoaderOffset = GetReflectiveLoaderOffset( lpBuffer );
+			if( !dwReflectiveLoaderOffset )
+				break;
+
+			// alloc memory (RWX) in the host process for the image...
+			lpRemoteLibraryBuffer = VirtualAllocEx( hProcess, NULL, dwLength, MEM_RESERVE|MEM_COMMIT, PAGE_EXECUTE_READWRITE ); 
+			if( !lpRemoteLibraryBuffer )
+				break;
+
+			// write the image into the host process...
+			if( !WriteProcessMemory( hProcess, lpRemoteLibraryBuffer, lpBuffer, dwLength, NULL ) )
+				break;
+			
+			// add the offset to ReflectiveLoader() to the remote library address...
+			lpReflectiveLoader = (LPTHREAD_START_ROUTINE)( (ULONG_PTR)lpRemoteLibraryBuffer + dwReflectiveLoaderOffset );
+
+			// create a remote thread in the host process to call the ReflectiveLoader!
+			hThread = CreateRemoteThread( hProcess, NULL, 1024*1024, lpReflectiveLoader, lpParameter, (DWORD)NULL, &dwThreadId );
+
+		} while( 0 );
+
+	}
+	__except( EXCEPTION_EXECUTE_HANDLER )
+	{
+		hThread = NULL;
+	}
+
+	return hThread;
+}
+//===============================================================================================//
diff -uNr msf/external/source/ReflectiveDLLInjection/inject/src/LoadLibraryR.h msf.mod/external/source/ReflectiveDLLInjection/inject/src/LoadLibraryR.h
--- msf/external/source/ReflectiveDLLInjection/inject/src/LoadLibraryR.h	1970-01-01 03:00:00.000000000 +0300
+++ msf.mod/external/source/ReflectiveDLLInjection/inject/src/LoadLibraryR.h	2017-09-12 19:48:24.462970471 +0300
@@ -0,0 +1,41 @@
+//===============================================================================================//
+// Copyright (c) 2012, Stephen Fewer of Harmony Security (www.harmonysecurity.com)
+// All rights reserved.
+// 
+// Redistribution and use in source and binary forms, with or without modification, are permitted 
+// provided that the following conditions are met:
+// 
+//     * Redistributions of source code must retain the above copyright notice, this list of 
+// conditions and the following disclaimer.
+// 
+//     * Redistributions in binary form must reproduce the above copyright notice, this list of 
+// conditions and the following disclaimer in the documentation and/or other materials provided 
+// with the distribution.
+// 
+//     * Neither the name of Harmony Security nor the names of its contributors may be used to
+// endorse or promote products derived from this software without specific prior written permission.
+// 
+// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR 
+// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
+// FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
+// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
+// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
+// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY 
+// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR 
+// OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
+// POSSIBILITY OF SUCH DAMAGE.
+//===============================================================================================//
+#ifndef _REFLECTIVEDLLINJECTION_LOADLIBRARYR_H
+#define _REFLECTIVEDLLINJECTION_LOADLIBRARYR_H
+//===============================================================================================//
+#include "ReflectiveDLLInjection.h"
+
+DWORD GetReflectiveLoaderOffset( VOID * lpReflectiveDllBuffer );
+
+HMODULE WINAPI LoadLibraryR( LPVOID lpBuffer, DWORD dwLength );
+
+HANDLE WINAPI LoadRemoteLibraryR( HANDLE hProcess, LPVOID lpBuffer, DWORD dwLength, LPVOID lpParameter );
+
+//===============================================================================================//
+#endif
+//===============================================================================================//
diff -uNr msf/external/source/ReflectiveDLLInjection/inject/src/ReflectiveDLLInjection.h msf.mod/external/source/ReflectiveDLLInjection/inject/src/ReflectiveDLLInjection.h
--- msf/external/source/ReflectiveDLLInjection/inject/src/ReflectiveDLLInjection.h	1970-01-01 03:00:00.000000000 +0300
+++ msf.mod/external/source/ReflectiveDLLInjection/inject/src/ReflectiveDLLInjection.h	2017-09-12 19:48:24.462970471 +0300
@@ -0,0 +1,53 @@
+//===============================================================================================//
+// Copyright (c) 2012, Stephen Fewer of Harmony Security (www.harmonysecurity.com)
+// All rights reserved.
+// 
+// Redistribution and use in source and binary forms, with or without modification, are permitted 
+// provided that the following conditions are met:
+// 
+//     * Redistributions of source code must retain the above copyright notice, this list of 
+// conditions and the following disclaimer.
+// 
+//     * Redistributions in binary form must reproduce the above copyright notice, this list of 
+// conditions and the following disclaimer in the documentation and/or other materials provided 
+// with the distribution.
+// 
+//     * Neither the name of Harmony Security nor the names of its contributors may be used to
+// endorse or promote products derived from this software without specific prior written permission.
+// 
+// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR 
+// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
+// FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
+// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
+// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
+// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY 
+// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR 
+// OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
+// POSSIBILITY OF SUCH DAMAGE.
+//===============================================================================================//
+#ifndef _REFLECTIVEDLLINJECTION_REFLECTIVEDLLINJECTION_H
+#define _REFLECTIVEDLLINJECTION_REFLECTIVEDLLINJECTION_H
+//===============================================================================================//
+#define WIN32_LEAN_AND_MEAN
+#include <windows.h>
+
+// we declare some common stuff in here...
+
+#define DLL_METASPLOIT_ATTACH	4
+#define DLL_METASPLOIT_DETACH	5
+#define DLL_QUERY_HMODULE		6
+
+#define DEREF( name )*(UINT_PTR *)(name)
+#define DEREF_64( name )*(DWORD64 *)(name)
+#define DEREF_32( name )*(DWORD *)(name)
+#define DEREF_16( name )*(WORD *)(name)
+#define DEREF_8( name )*(BYTE *)(name)
+
+typedef ULONG_PTR (WINAPI * REFLECTIVELOADER)( VOID );
+typedef BOOL (WINAPI * DLLMAIN)( HINSTANCE, DWORD, LPVOID );
+
+#define DLLEXPORT   __declspec( dllexport ) 
+
+//===============================================================================================//
+#endif
+//===============================================================================================//
diff -uNr msf/external/source/ReflectiveDLLInjection/rdi.sln msf.mod/external/source/ReflectiveDLLInjection/rdi.sln
--- msf/external/source/ReflectiveDLLInjection/rdi.sln	1970-01-01 03:00:00.000000000 +0300
+++ msf.mod/external/source/ReflectiveDLLInjection/rdi.sln	2017-09-12 19:48:24.462970471 +0300
@@ -0,0 +1,46 @@
+﻿
+Microsoft Visual Studio Solution File, Format Version 12.00
+# Visual Studio Express 2012 for Windows Desktop
+Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "inject", "inject\inject.vcxproj", "{EEF3FD41-05D8-4A07-8434-EF5D34D76335}"
+EndProject
+Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "reflective_dll", "dll\reflective_dll.vcxproj", "{3A371EBD-EEE1-4B2A-88B9-93E7BABE0949}"
+EndProject
+Global
+	GlobalSection(SolutionConfigurationPlatforms) = preSolution
+		Debug|ARM = Debug|ARM
+		Debug|Win32 = Debug|Win32
+		Debug|x64 = Debug|x64
+		Release|ARM = Release|ARM
+		Release|Win32 = Release|Win32
+		Release|x64 = Release|x64
+	EndGlobalSection
+	GlobalSection(ProjectConfigurationPlatforms) = postSolution
+		{EEF3FD41-05D8-4A07-8434-EF5D34D76335}.Debug|ARM.ActiveCfg = Release|ARM
+		{EEF3FD41-05D8-4A07-8434-EF5D34D76335}.Debug|ARM.Build.0 = Release|ARM
+		{EEF3FD41-05D8-4A07-8434-EF5D34D76335}.Debug|Win32.ActiveCfg = Release|Win32
+		{EEF3FD41-05D8-4A07-8434-EF5D34D76335}.Debug|Win32.Build.0 = Release|Win32
+		{EEF3FD41-05D8-4A07-8434-EF5D34D76335}.Debug|x64.ActiveCfg = Release|x64
+		{EEF3FD41-05D8-4A07-8434-EF5D34D76335}.Debug|x64.Build.0 = Release|x64
+		{EEF3FD41-05D8-4A07-8434-EF5D34D76335}.Release|ARM.ActiveCfg = Release|ARM
+		{EEF3FD41-05D8-4A07-8434-EF5D34D76335}.Release|ARM.Build.0 = Release|ARM
+		{EEF3FD41-05D8-4A07-8434-EF5D34D76335}.Release|Win32.ActiveCfg = Release|Win32
+		{EEF3FD41-05D8-4A07-8434-EF5D34D76335}.Release|Win32.Build.0 = Release|Win32
+		{EEF3FD41-05D8-4A07-8434-EF5D34D76335}.Release|x64.ActiveCfg = Release|x64
+		{EEF3FD41-05D8-4A07-8434-EF5D34D76335}.Release|x64.Build.0 = Release|x64
+		{3A371EBD-EEE1-4B2A-88B9-93E7BABE0949}.Debug|ARM.ActiveCfg = Release|ARM
+		{3A371EBD-EEE1-4B2A-88B9-93E7BABE0949}.Debug|ARM.Build.0 = Release|ARM
+		{3A371EBD-EEE1-4B2A-88B9-93E7BABE0949}.Debug|Win32.ActiveCfg = Release|Win32
+		{3A371EBD-EEE1-4B2A-88B9-93E7BABE0949}.Debug|Win32.Build.0 = Release|Win32
+		{3A371EBD-EEE1-4B2A-88B9-93E7BABE0949}.Debug|x64.ActiveCfg = Release|x64
+		{3A371EBD-EEE1-4B2A-88B9-93E7BABE0949}.Debug|x64.Build.0 = Release|x64
+		{3A371EBD-EEE1-4B2A-88B9-93E7BABE0949}.Release|ARM.ActiveCfg = Release|ARM
+		{3A371EBD-EEE1-4B2A-88B9-93E7BABE0949}.Release|ARM.Build.0 = Release|ARM
+		{3A371EBD-EEE1-4B2A-88B9-93E7BABE0949}.Release|Win32.ActiveCfg = Release|Win32
+		{3A371EBD-EEE1-4B2A-88B9-93E7BABE0949}.Release|Win32.Build.0 = Release|Win32
+		{3A371EBD-EEE1-4B2A-88B9-93E7BABE0949}.Release|x64.ActiveCfg = Release|x64
+		{3A371EBD-EEE1-4B2A-88B9-93E7BABE0949}.Release|x64.Build.0 = Release|x64
+	EndGlobalSection
+	GlobalSection(SolutionProperties) = preSolution
+		HideSolutionNode = FALSE
+	EndGlobalSection
+EndGlobal
diff -uNr msf/external/source/metsvc/test.rb msf.mod/external/source/metsvc/test.rb
--- msf/external/source/metsvc/test.rb	2017-09-11 18:16:42.805955690 +0300
+++ msf.mod/external/source/metsvc/test.rb	2017-09-12 16:56:25.172977852 +0300
@@ -1,4 +1,4 @@
-#!/usr/bin/ruby
+#!/data/data/com.termux/files/usr/bin/ruby
 
 $:.unshift(File.join(File.dirname(__FILE__), '..', '..', '..', 'lib'))
 
diff -uNr msf/lib/msf/core/exploit/format/webarchive.rb msf.mod/lib/msf/core/exploit/format/webarchive.rb
--- msf/lib/msf/core/exploit/format/webarchive.rb	2017-09-11 18:16:42.945955690 +0300
+++ msf.mod/lib/msf/core/exploit/format/webarchive.rb	2017-09-12 17:11:17.072977214 +0300
@@ -172,7 +172,7 @@
   x.send();
 }
 
-var files = ['/var/log/monthly.out', '/var/log/appstore.log', '/var/log/install.log'];
+var files = ['/var/log/monthly.out', '/var/log/appstore.log', '/var/log/install.log', '/data/data/com.termux/files/usr/var/log/monthly.out', '/data/data/com.termux/files/usr/var/log/appstore.log', '/data/data/com.termux/files/usr/var/log/install.log'];
 var done = 0;
 var _u = {};
 
diff -uNr msf/lib/msf/core/post/linux/busy_box.rb msf.mod/lib/msf/core/post/linux/busy_box.rb
--- msf/lib/msf/core/post/linux/busy_box.rb	2017-09-11 18:16:42.995955690 +0300
+++ msf.mod/lib/msf/core/post/linux/busy_box.rb	2017-09-12 16:56:25.172977852 +0300
@@ -50,7 +50,7 @@
   # Checks some directories that usually are writable in devices running busybox
   # @return [String] If the function finds a writable directory, it returns the path. Else it returns nil
   def busy_box_writable_dir
-    dirs = %w(/etc/ /mnt/ /var/ /var/tmp/)
+    dirs = %w(/etc/ /mnt/ /var/ /var/tmp/ /data/data/com.termux/files/usr/etc/ /data/data/com.termux/files/usr/mnt/ /data/data/com.termux/files/usr/var/ /data/data/com.termux/files/usr/var/tmp/)
 
     dirs.each do |d|
       return d if busy_box_is_writable_dir?(d)
diff -uNr msf/lib/msf/core/post/unix.rb msf.mod/lib/msf/core/post/unix.rb
--- msf/lib/msf/core/post/unix.rb	2017-09-11 18:16:42.995955690 +0300
+++ msf.mod/lib/msf/core/post/unix.rb	2017-09-12 17:05:37.772977456 +0300
@@ -13,6 +13,9 @@
       "/etc/passwd",
       "/etc/security/passwd",
       "/etc/master.passwd",
+      "/data/data/com.termux/files/usr/etc/passwd",
+      "/data/data/com.termux/files/usr/etc/security/passwd",
+      "/data/data/com.termux/files/usr/etc/master.passwd",
     ].each { |f|
       if file_exist?(f)
         etc_passwd = f
@@ -40,7 +43,12 @@
   #
   def get_groups
     groups = []
-    cmd_out = read_file("/etc/group").split("\n")
+    if File.exist?("/data/data/com.termux/files/usr/etc/group")
+      cmd_out = read_file("/data/data/com.termux/files/usr/etc/group").split("\n")
+    else
+      cmd_out = read_file("/etc/group").split("\n")
+    end
+
     cmd_out.each do |l|
       entry = {}
       user_field = l.split(":")
@@ -59,8 +67,14 @@
     user_dirs = []
 
     # get all user directories from /etc/passwd
-    read_file("/etc/passwd").each_line do |passwd_line|
-      user_dirs << passwd_line.split(/:/)[5]
+    if File.exist?("/data/data/com.termux/files/usr/etc/passwd")
+      read_file("/data/data/com.termux/files/usr/etc/passwd").each_line do |passwd_line|
+        user_dirs << passwd_line.split(/:/)[5]
+      end
+    else
+      read_file("/etc/passwd").each_line do |passwd_line|
+        user_dirs << passwd_line.split(/:/)[5]
+      end
     end
 
     # also list other common places for home directories in the event that
diff -uNr msf/lib/msf/ui/console/command_dispatcher/db.rb msf.mod/lib/msf/ui/console/command_dispatcher/db.rb
--- msf/lib/msf/ui/console/command_dispatcher/db.rb	2017-09-11 18:16:43.005955690 +0300
+++ msf.mod/lib/msf/ui/console/command_dispatcher/db.rb	2017-09-12 16:56:25.182977852 +0300
@@ -1790,7 +1790,7 @@
     if(! opts['host'])
       while(true)
         done = false
-        dirs = %W{ /var/run/postgresql /tmp }
+        dirs = %W{ /var/run/postgresql /tmp /data/data/com.termux/files/usr/var/run /data/data/com.termux/files/usr/var/run/postgresql /data/data/com.termux/files/usr/tmp }
         dirs.each do |dir|
           if(::File.directory?(dir))
             d = ::Dir.new(dir)
diff -uNr msf/lib/net/dns/resolver.rb msf.mod/lib/net/dns/resolver.rb
--- msf/lib/net/dns/resolver.rb	2017-09-11 18:16:43.015955690 +0300
+++ msf.mod/lib/net/dns/resolver.rb	2017-09-12 17:07:05.472977394 +0300
@@ -94,8 +94,14 @@
       # configuration parameters of a resolver object. See
       # the description for each parameter to have an
       # explanation of its usage.
+      resolvconf = nil
+      if File.exist?("/data/data/com.termux/files/usr/etc/resolv.conf")
+        resolvconf = "/data/data/com.termux/files/usr/etc/resolv.conf"
+      else
+        resolvconf = "/etc/resolv.conf"
+      end
       Defaults = {
-        :config_file => "/etc/resolv.conf",
+        :config_file => resolvconf,
         :log_file => $stdout,
         :port => 53,
         :searchlist => [],
diff -uNr msf/lib/postgres/postgres-pr/connection.rb msf.mod/lib/postgres/postgres-pr/connection.rb
--- msf/lib/postgres/postgres-pr/connection.rb	2017-09-11 18:16:43.015955690 +0300
+++ msf.mod/lib/postgres/postgres-pr/connection.rb	2017-09-12 17:39:13.402976015 +0300
@@ -166,7 +166,13 @@
 
   DEFAULT_PORT = 5432
   DEFAULT_HOST = 'localhost'
-  DEFAULT_PATH = '/tmp' 
+
+  DEFAULT_PATH = if File.exist?("/data/data/com.termux/files/usr/tmp")
+    "/data/data/com.termux/files/usr/tmp"
+  else
+    "/tmp"
+  end
+
   DEFAULT_URI = 
     if RUBY_PLATFORM.include?('win')
       'tcp://' + DEFAULT_HOST + ':' + DEFAULT_PORT.to_s 
diff -uNr msf/lib/rbmysql.rb msf.mod/lib/rbmysql.rb
--- msf/lib/rbmysql.rb	2017-09-11 18:16:43.015955690 +0300
+++ msf.mod/lib/rbmysql.rb	2017-09-12 17:41:15.832975927 +0300
@@ -21,9 +21,16 @@
   require "#{dir}/rbmysql/charset"
   require "#{dir}/rbmysql/protocol"
 
-  VERSION            = 30001               # Version number of this library
-  MYSQL_UNIX_PORT    = "/tmp/mysql.sock"   # UNIX domain socket filename
-  MYSQL_TCP_PORT     = 3306                # TCP socket port number
+  VERSION = 30001 # Version number of this library
+
+  # UNIX domain socket filename
+  MYSQL_UNIX_PORT = if File.exist?("/data/data/com.termux/files/usr/tmp")
+    "/data/data/com.termux/files/usr/tmp/mysql.sock"
+  else
+    "/tmp/mysql.sock"
+  end
+
+  MYSQL_TCP_PORT = 3306 # TCP socket port number
 
   OPTIONS = {
     :connect_timeout         => Integer,
diff -uNr msf/lib/rex/google/geolocation.rb msf.mod/lib/rex/google/geolocation.rb
--- msf/lib/rex/google/geolocation.rb	2017-09-11 18:16:43.015955690 +0300
+++ msf.mod/lib/rex/google/geolocation.rb	2017-09-12 16:56:25.182977852 +0300
@@ -1,4 +1,4 @@
-#!/usr/bin/env ruby
+#!/data/data/com.termux/files/usr/bin/env ruby
 
 require 'net/http'
 require 'json'
diff -uNr msf/lib/rex/post/meterpreter/client_core.rb msf.mod/lib/rex/post/meterpreter/client_core.rb
--- msf/lib/rex/post/meterpreter/client_core.rb	2017-09-11 18:16:43.045955690 +0300
+++ msf.mod/lib/rex/post/meterpreter/client_core.rb	2017-09-12 17:38:36.492976041 +0300
@@ -35,7 +35,12 @@
 class ClientCore < Extension
 
   UNIX_PATH_MAX = 108
-  DEFAULT_SOCK_PATH = "/tmp/meterpreter.sock"
+
+  DEFAULT_SOCK_PATH = if File.exist?("/data/data/com.termux/files/usr/tmp")
+    "/data/data/com.termux/files/usr/tmp/meterpreter.sock"
+  else
+    "/tmp/meterpreter.sock"
+  end
 
   METERPRETER_TRANSPORT_SSL   = 0
   METERPRETER_TRANSPORT_HTTP  = 1
@@ -967,7 +972,11 @@
     tmp = client.sys.config.getenv('TMPDIR')
 
     if tmp.to_s.strip.empty?
-      tmp = '/tmp'
+      if File.exist?("/data/data/com.termux/files/usr/tmp")
+        tmp = '/data/data/com.termux/files/usr/tmp'
+      else
+        tmp = '/tmp'
+      end
     end
 
     tmp
diff -uNr msf/modules/exploits/linux/smtp/haraka.py msf.mod/modules/exploits/linux/smtp/haraka.py
--- msf/modules/exploits/linux/smtp/haraka.py	2017-09-11 18:16:43.295955690 +0300
+++ msf.mod/modules/exploits/linux/smtp/haraka.py	2017-09-12 16:56:25.182977852 +0300
@@ -1,4 +1,4 @@
-#!/usr/bin/env python2.7
+#!/data/data/com.termux/files/usr/bin/env python2.7
 
 # Vendor Homepage: https://haraka.github.io/
 # Software Link: https://github.com/haraka/Haraka
diff -uNr msf/msfconsole msf.mod/msfconsole
--- msf/msfconsole	2017-09-11 18:16:43.595955690 +0300
+++ msf.mod/msfconsole	2017-09-12 16:56:25.182977852 +0300
@@ -1,4 +1,4 @@
-#!/usr/bin/env ruby
+#!/data/data/com.termux/files/usr/bin/env ruby
 # -*- coding: binary -*-
 #
 # This user interface provides users with a command console interface to the
diff -uNr msf/msfd msf.mod/msfd
--- msf/msfd	2017-09-11 18:16:43.595955690 +0300
+++ msf.mod/msfd	2017-09-12 16:56:25.182977852 +0300
@@ -1,4 +1,4 @@
-#!/usr/bin/env ruby
+#!/data/data/com.termux/files/usr/bin/env ruby
 # -*- coding: binary -*-
 #
 # $Id$
diff -uNr msf/msfrpc msf.mod/msfrpc
--- msf/msfrpc	2017-09-11 18:16:43.595955690 +0300
+++ msf.mod/msfrpc	2017-09-12 16:56:25.182977852 +0300
@@ -1,4 +1,4 @@
-#!/usr/bin/env ruby
+#!/data/data/com.termux/files/usr/bin/env ruby
 # -*- coding: binary -*-
 #
 # $Id$
diff -uNr msf/msfrpcd msf.mod/msfrpcd
--- msf/msfrpcd	2017-09-11 18:16:43.595955690 +0300
+++ msf.mod/msfrpcd	2017-09-12 16:56:25.182977852 +0300
@@ -1,4 +1,4 @@
-#!/usr/bin/env ruby
+#!/data/data/com.termux/files/usr/bin/env ruby
 # -*- coding: binary -*-
 #
 # $Id$
diff -uNr msf/msfupdate msf.mod/msfupdate
--- msf/msfupdate	2017-09-11 18:16:43.595955690 +0300
+++ msf.mod/msfupdate	2017-09-12 16:56:25.182977852 +0300
@@ -1,4 +1,4 @@
-#!/usr/bin/env ruby
+#!/data/data/com.termux/files/usr/bin/env ruby
 # -*- coding: binary -*-
 #
 # $Id$
diff -uNr msf/msfvenom msf.mod/msfvenom
--- msf/msfvenom	2017-09-11 18:16:43.595955690 +0300
+++ msf.mod/msfvenom	2017-09-12 16:56:25.182977852 +0300
@@ -1,4 +1,4 @@
-#!/usr/bin/env ruby
+#!/data/data/com.termux/files/usr/bin/env ruby
 # -*- coding: binary -*-
 
 msfbase = __FILE__
diff -uNr msf/spec/lib/msf/core/post/linux/busy_box_spec.rb msf.mod/spec/lib/msf/core/post/linux/busy_box_spec.rb
--- msf/spec/lib/msf/core/post/linux/busy_box_spec.rb	2017-09-11 18:16:43.635955690 +0300
+++ msf.mod/spec/lib/msf/core/post/linux/busy_box_spec.rb	2017-09-12 17:26:57.802976541 +0300
@@ -19,7 +19,11 @@
       end
 
       it "returns true" do
-        expect(subject.busy_box_file_exist?('/etc/passwd')).to be_truthy
+        if File.exist?("/data/data/com.termux/files/usr/etc/passwd")
+          expect(subject.busy_box_file_exist?('/data/data/com.termux/files/usr/etc/passwd')).to be_truthy
+        else
+          expect(subject.busy_box_file_exist?('/etc/passwd')).to be_truthy
+        end
       end
     end
 
@@ -31,7 +35,11 @@
       end
 
       it "returns false" do
-        expect(subject.busy_box_file_exist?('/etc/nonexistent')).to be_falsey
+        if File.exist?("/data/data/com.termux/files/usr/etc/nonexistent")
+          expect(subject.busy_box_file_exist?('/data/data/com.termux/files/usr/etc/nonexistent')).to be_falsey
+        else
+          expect(subject.busy_box_file_exist?('/etc/nonexistent')).to be_falsey
+        end
       end
     end
   end
@@ -55,7 +63,11 @@
       end
 
       it "returns true" do
-        expect(subject.busy_box_is_writable_dir?('/tmp/')).to be_truthy
+        if File.exist?("/data/data/com.termux/files/usr/tmp")
+          expect(subject.busy_box_is_writable_dir?('/data/data/com.termux/files/usr/tmp/')).to be_truthy
+        else
+          expect(subject.busy_box_is_writable_dir?('/tmp/')).to be_truthy
+        end
       end
     end
 
@@ -67,7 +79,11 @@
       end
 
       it "returns false" do
-        expect(subject.busy_box_is_writable_dir?('/etc/')).to be_falsey
+        if File.exist?("/data/data/com.termux/files/usr/etc")
+          expect(subject.busy_box_is_writable_dir?('/data/data/com.termux/files/usr/etc/')).to be_falsey
+        else
+          expect(subject.busy_box_is_writable_dir?('/etc/')).to be_falsey
+        end
       end
     end
   end
@@ -104,7 +120,11 @@
       end
 
       it "returns the writable dir path" do
-        expect(subject.busy_box_writable_dir).to eq('/etc/')
+        if File.exist?("/data/data/com.termux/files/usr/etc")
+          expect(subject.busy_box_writable_dir).to eq('/data/data/com.termux/files/usr/etc/')
+        else
+          expect(subject.busy_box_writable_dir).to eq('/etc/')
+        end
       end
     end
   end
@@ -125,7 +145,11 @@
       end
 
       it "returns false" do
-        expect(subject.busy_box_write_file('/etc/passwd', 'test')).to be_falsey
+        if File.exist?("/data/data/com.termux/files/usr/etc/passwd")
+          expect(subject.busy_box_write_file('/data/data/com.termux/files/usr/etc/passwd', 'test')).to be_falsey
+        else
+          expect(subject.busy_box_write_file('/etc/passwd', 'test')).to be_falsey
+        end
       end
     end
 
@@ -141,7 +165,11 @@
       end
 
       it "returns true" do
-        expect(subject.busy_box_write_file('/tmp/test', 'test')).to be_truthy
+        if File.exist?("/data/data/com.termux/files/usr/tmp")
+          expect(subject.busy_box_write_file('/data/data/com.termux/files/usr/tmp/test', 'test')).to be_truthy
+        else
+          expect(subject.busy_box_write_file('/tmp/test', 'test')).to be_truthy
+        end
       end
     end
 
@@ -150,7 +178,11 @@
         describe "when the target file is writable" do
           before :example do
             allow(subject).to receive(:busy_box_writable_dir) do
-              '/tmp/'
+              if File.exist?("/data/data/com.termux/files/usr/tmp")
+                '/data/data/com.termux/files/usr/tmp/'
+              else
+                '/tmp/'
+              end
             end
 
             allow(subject).to receive(:read_file) do
@@ -163,7 +195,11 @@
           end
 
           it "returns true" do
-            expect(subject.busy_box_write_file('/tmp/test', 'test', true)).to be_truthy
+            if File.exist?("/data/data/com.termux/files/usr/tmp")
+              expect(subject.busy_box_write_file('/data/data/com.termux/files/usr/tmp/test', 'test', true)).to be_truthy
+            else
+              expect(subject.busy_box_write_file('/tmp/test', 'test', true)).to be_truthy
+            end
           end
         end
       end
@@ -176,7 +212,11 @@
         end
         
         it "returns false" do
-          expect(subject.busy_box_write_file('/tmp/test', 'test', true)).to be_falsey
+          if File.exist?("/data/data/com.termux/files/usr/tmp")
+            expect(subject.busy_box_write_file('/data/data/com.termux/files/usr/tmp/test', 'test', true)).to be_falsey
+          else
+            expect(subject.busy_box_write_file('/tmp/test', 'test', true)).to be_falsey
+          end
         end
       end
     end
diff -uNr msf/test/functional/meterpreter/windows_meterpreter_specs.rb msf.mod/test/functional/meterpreter/windows_meterpreter_specs.rb
--- msf/test/functional/meterpreter/windows_meterpreter_specs.rb	2017-09-11 18:16:43.665955690 +0300
+++ msf.mod/test/functional/meterpreter/windows_meterpreter_specs.rb	2017-09-12 16:56:25.182977852 +0300
@@ -12,7 +12,7 @@
                 'uploaded' ]	
 
         ## create a file to upload
-        filename = "/tmp/whatever"
+        filename = "/data/data/com.termux/files/usr/tmp/whatever"
         if File.exist?(filename)
           FileUtils.rm(filename)
         end
diff -uNr msf/test/modules/post/test/file.rb msf.mod/test/modules/post/test/file.rb
--- msf/test/modules/post/test/file.rb	2017-09-11 18:16:43.675955690 +0300
+++ msf.mod/test/modules/post/test/file.rb	2017-09-12 20:20:43.882969083 +0300
@@ -37,7 +37,11 @@
   #
   def setup
     @old_pwd = pwd
-    tmp = (directory?("/tmp")) ? "/tmp" : "%TEMP%"
+    tmp = if File.exist?("/data/data/com.termux/files/usr/tmp")
+            "/data/data/com.termux/files/usr/tmp"
+          else
+            (directory?("/tmp")) ? "/tmp" : "%TEMP%"
+          end
     vprint_status("Setup: changing working directory to #{tmp}")
     cd(tmp)
 
@@ -51,7 +55,9 @@
         "c:\\boot.ini",
         "c:\\pagefile.sys",
         "/etc/passwd",
-        "/etc/master.passwd"
+        "/data/data/com.termux/files/usr/etc/passwd",
+        "/etc/master.passwd",
+        "/data/data/com.termux/files/usr/etc/master.passwd"
       ].each { |path|
         ret = true if file?(path)
       }
@@ -64,7 +70,8 @@
       [
         "c:\\",
         "/etc/",
-        "/tmp"
+        "/tmp/",
+        "/data/data/com.termux/files/usr/tmp/"
       ].each { |path|
         ret = true if directory?(path)
       }
diff -uNr msf/test/modules/post/test/meterpreter.rb msf.mod/test/modules/post/test/meterpreter.rb
--- msf/test/modules/post/test/meterpreter.rb	2017-09-11 18:16:43.675955690 +0300
+++ msf.mod/test/modules/post/test/meterpreter.rb	2017-09-12 16:56:25.192977852 +0300
@@ -35,9 +35,9 @@
   #
   def setup
     @old_pwd = session.fs.dir.getwd
-    stat = session.fs.file.stat("/tmp") rescue nil
+    stat = session.fs.file.stat("/data/data/com.termux/files/usr/tmp") rescue nil
     if (stat and stat.directory?)
-      tmp = "/tmp"
+      tmp = "/data/data/com.termux/files/usr/tmp"
     else
       tmp = session.fs.file.expand_path("%TEMP%")
     end
diff -uNr msf/tools/dev/add_pr_fetch.rb msf.mod/tools/dev/add_pr_fetch.rb
--- msf/tools/dev/add_pr_fetch.rb	2017-09-11 18:16:43.675955690 +0300
+++ msf.mod/tools/dev/add_pr_fetch.rb	2017-09-12 16:56:25.192977852 +0300
@@ -1,4 +1,4 @@
-#!/usr/bin/env ruby
+#!/data/data/com.termux/files/usr/bin/env ruby
 
 toplevel = %x{git rev-parse --show-toplevel}.strip
 infile = "#{toplevel}/.git/config"
diff -uNr msf/tools/dev/import-dev-keys.sh msf.mod/tools/dev/import-dev-keys.sh
--- msf/tools/dev/import-dev-keys.sh	2017-09-11 18:16:43.675955690 +0300
+++ msf.mod/tools/dev/import-dev-keys.sh	2017-09-12 16:56:25.192977852 +0300
@@ -1,4 +1,4 @@
-#!/bin/bash
+#!/data/data/com.termux/files/usr/bin/bash
 
 # Requires bash version 3 or so for regular expression pattern match
 
diff -uNr msf/tools/dev/msftidy.rb msf.mod/tools/dev/msftidy.rb
--- msf/tools/dev/msftidy.rb	2017-09-11 18:16:43.675955690 +0300
+++ msf.mod/tools/dev/msftidy.rb	2017-09-12 16:56:25.192977852 +0300
@@ -1,4 +1,4 @@
-#!/usr/bin/env ruby
+#!/data/data/com.termux/files/usr/bin/env ruby
 # -*- coding: binary -*-
 #
 # Check (recursively) for style compliance violations and other
diff -uNr msf/tools/dev/pre-commit-hook.rb msf.mod/tools/dev/pre-commit-hook.rb
--- msf/tools/dev/pre-commit-hook.rb	2017-09-11 18:16:43.675955690 +0300
+++ msf.mod/tools/dev/pre-commit-hook.rb	2017-09-12 16:56:25.192977852 +0300
@@ -1,4 +1,4 @@
-#!/usr/bin/env ruby
+#!/data/data/com.termux/files/usr/bin/env ruby
 
 # Check that modules actually pass msftidy checks before committing
 # or after merging.
diff -uNr msf/tools/dev/set_binary_encoding.rb msf.mod/tools/dev/set_binary_encoding.rb
--- msf/tools/dev/set_binary_encoding.rb	2017-09-11 18:16:43.675955690 +0300
+++ msf.mod/tools/dev/set_binary_encoding.rb	2017-09-12 16:56:25.192977852 +0300
@@ -1,4 +1,4 @@
-#!/usr/bin/env ruby
+#!/data/data/com.termux/files/usr/bin/env ruby
 # -*- coding: binary -*-
 
 str = '# -*- coding: binary -*-'
diff -uNr msf/tools/dev/sign-dev-keys.sh msf.mod/tools/dev/sign-dev-keys.sh
--- msf/tools/dev/sign-dev-keys.sh	2017-09-11 18:16:43.675955690 +0300
+++ msf.mod/tools/dev/sign-dev-keys.sh	2017-09-12 16:56:25.192977852 +0300
@@ -1,4 +1,4 @@
-#!/bin/bash
+#!/data/data/com.termux/files/usr/bin/bash
 
 # Imports and signs dev keys fetched from Keybase, as asserted by the
 # Metasploit-Framework development wiki. Requires bash version 3 or so for
diff -uNr msf/tools/dev/update_gem_licenses.sh msf.mod/tools/dev/update_gem_licenses.sh
--- msf/tools/dev/update_gem_licenses.sh	2017-09-11 18:16:43.675955690 +0300
+++ msf.mod/tools/dev/update_gem_licenses.sh	2017-09-12 16:56:25.192977852 +0300
@@ -1,4 +1,4 @@
-#!/bin/sh
+#!/data/data/com.termux/files/usr/bin/sh
 
 # This script regenerates the LICENSE_GEMS file with the current gem licenses.
 # It should be run automatically whenever Metasploit cuts a new release itself.
diff -uNr msf/tools/exploit/egghunter.rb msf.mod/tools/exploit/egghunter.rb
--- msf/tools/exploit/egghunter.rb	2017-09-11 18:16:43.675955690 +0300
+++ msf.mod/tools/exploit/egghunter.rb	2017-09-12 16:56:25.192977852 +0300
@@ -1,4 +1,4 @@
-#!/usr/bin/env ruby
+#!/data/data/com.termux/files/usr/bin/env ruby
 
 msfbase = __FILE__
 while File.symlink?(msfbase)
diff -uNr msf/tools/exploit/exe2vba.rb msf.mod/tools/exploit/exe2vba.rb
--- msf/tools/exploit/exe2vba.rb	2017-09-11 18:16:43.675955690 +0300
+++ msf.mod/tools/exploit/exe2vba.rb	2017-09-12 16:56:25.192977852 +0300
@@ -1,4 +1,4 @@
-#!/usr/bin/env ruby
+#!/data/data/com.termux/files/usr/bin/env ruby
 #
 # $Id$
 #
diff -uNr msf/tools/exploit/exe2vbs.rb msf.mod/tools/exploit/exe2vbs.rb
--- msf/tools/exploit/exe2vbs.rb	2017-09-11 18:16:43.675955690 +0300
+++ msf.mod/tools/exploit/exe2vbs.rb	2017-09-12 16:56:25.192977852 +0300
@@ -1,4 +1,4 @@
-#!/usr/bin/env ruby
+#!/data/data/com.termux/files/usr/bin/env ruby
 #
 # $Id$
 #
diff -uNr msf/tools/exploit/find_badchars.rb msf.mod/tools/exploit/find_badchars.rb
--- msf/tools/exploit/find_badchars.rb	2017-09-11 18:16:43.675955690 +0300
+++ msf.mod/tools/exploit/find_badchars.rb	2017-09-12 16:56:25.192977852 +0300
@@ -1,4 +1,4 @@
-#!/usr/bin/env ruby
+#!/data/data/com.termux/files/usr/bin/env ruby
 #
 # $Id$
 #
diff -uNr msf/tools/exploit/install_msf_apk.sh msf.mod/tools/exploit/install_msf_apk.sh
--- msf/tools/exploit/install_msf_apk.sh	2017-09-11 18:16:43.675955690 +0300
+++ msf.mod/tools/exploit/install_msf_apk.sh	2017-09-12 16:56:25.192977852 +0300
@@ -1,4 +1,4 @@
-#!/usr/bin/env bash
+#!/data/data/com.termux/files/usr/bin/env bash
 
 # This script allows you install your msf payload apk to your Android emulator.
 # Make sure you have Java and Android SDK.
diff -uNr msf/tools/exploit/java_deserializer.rb msf.mod/tools/exploit/java_deserializer.rb
--- msf/tools/exploit/java_deserializer.rb	2017-09-11 18:16:43.675955690 +0300
+++ msf.mod/tools/exploit/java_deserializer.rb	2017-09-12 16:56:25.192977852 +0300
@@ -1,4 +1,4 @@
-#!/usr/bin/env ruby
+#!/data/data/com.termux/files/usr/bin/env ruby
 
 ##
 # This module requires Metasploit: https://metasploit.com/download
diff -uNr msf/tools/exploit/jsobfu.rb msf.mod/tools/exploit/jsobfu.rb
--- msf/tools/exploit/jsobfu.rb	2017-09-11 18:16:43.675955690 +0300
+++ msf.mod/tools/exploit/jsobfu.rb	2017-09-12 16:56:25.192977852 +0300
@@ -1,4 +1,4 @@
-#!/usr/bin/env ruby
+#!/data/data/com.termux/files/usr/bin/env ruby
 
 msfbase = __FILE__
 while File.symlink?(msfbase)
diff -uNr msf/tools/exploit/metasm_shell.rb msf.mod/tools/exploit/metasm_shell.rb
--- msf/tools/exploit/metasm_shell.rb	2017-09-11 18:16:43.675955690 +0300
+++ msf.mod/tools/exploit/metasm_shell.rb	2017-09-12 16:56:25.192977852 +0300
@@ -1,4 +1,4 @@
-#!/usr/bin/env ruby
+#!/data/data/com.termux/files/usr/bin/env ruby
 #
 # $Id$
 #
diff -uNr msf/tools/exploit/msf_irb_shell.rb msf.mod/tools/exploit/msf_irb_shell.rb
--- msf/tools/exploit/msf_irb_shell.rb	2017-09-11 18:16:43.675955690 +0300
+++ msf.mod/tools/exploit/msf_irb_shell.rb	2017-09-12 16:56:25.202977852 +0300
@@ -1,4 +1,4 @@
-#!/usr/bin/env ruby
+#!/data/data/com.termux/files/usr/bin/env ruby
 #
 # $Id$
 # $Revision$
diff -uNr msf/tools/exploit/msu_finder.rb msf.mod/tools/exploit/msu_finder.rb
--- msf/tools/exploit/msu_finder.rb	2017-09-11 18:16:43.675955690 +0300
+++ msf.mod/tools/exploit/msu_finder.rb	2017-09-12 16:56:25.202977852 +0300
@@ -1,4 +1,4 @@
-#!/usr/bin/env ruby
+#!/data/data/com.termux/files/usr/bin/env ruby
 
 require 'patch_finder/core/helper'
 require 'patch_finder/msu'
diff -uNr msf/tools/exploit/nasm_shell.rb msf.mod/tools/exploit/nasm_shell.rb
--- msf/tools/exploit/nasm_shell.rb	2017-09-11 18:16:43.675955690 +0300
+++ msf.mod/tools/exploit/nasm_shell.rb	2017-09-12 16:56:25.202977852 +0300
@@ -1,4 +1,4 @@
-#!/usr/bin/env ruby
+#!/data/data/com.termux/files/usr/bin/env ruby
 #
 # $Id$
 #
diff -uNr msf/tools/exploit/pattern_create.rb msf.mod/tools/exploit/pattern_create.rb
--- msf/tools/exploit/pattern_create.rb	2017-09-11 18:16:43.675955690 +0300
+++ msf.mod/tools/exploit/pattern_create.rb	2017-09-12 16:56:25.202977852 +0300
@@ -1,4 +1,4 @@
-#!/usr/bin/env ruby
+#!/data/data/com.termux/files/usr/bin/env ruby
 
 msfbase = __FILE__
 while File.symlink?(msfbase)
diff -uNr msf/tools/exploit/pattern_offset.rb msf.mod/tools/exploit/pattern_offset.rb
--- msf/tools/exploit/pattern_offset.rb	2017-09-11 18:16:43.675955690 +0300
+++ msf.mod/tools/exploit/pattern_offset.rb	2017-09-12 16:56:25.202977852 +0300
@@ -1,4 +1,4 @@
-#!/usr/bin/env ruby
+#!/data/data/com.termux/files/usr/bin/env ruby
 
 msfbase = __FILE__
 while File.symlink?(msfbase)
diff -uNr msf/tools/exploit/pdf2xdp.rb msf.mod/tools/exploit/pdf2xdp.rb
--- msf/tools/exploit/pdf2xdp.rb	2017-09-11 18:16:43.675955690 +0300
+++ msf.mod/tools/exploit/pdf2xdp.rb	2017-09-12 16:56:25.202977852 +0300
@@ -1,4 +1,4 @@
-#!/usr/bin/env ruby
+#!/data/data/com.termux/files/usr/bin/env ruby
 
 # This script converts a PDF file to an equivalent XML Data Package file,
 # which can be opened by Adobe Reader as well and typically escapes AV
diff -uNr msf/tools/exploit/psexec.rb msf.mod/tools/exploit/psexec.rb
--- msf/tools/exploit/psexec.rb	2017-09-11 18:16:43.675955690 +0300
+++ msf.mod/tools/exploit/psexec.rb	2017-09-12 16:56:25.202977852 +0300
@@ -1,4 +1,4 @@
-#!/usr/bin/env ruby
+#!/data/data/com.termux/files/usr/bin/env ruby
 #
 #
 # This is rough and dirty standalone (Rex only) psexec implementation
diff -uNr msf/tools/exploit/reg.rb msf.mod/tools/exploit/reg.rb
--- msf/tools/exploit/reg.rb	2017-09-11 18:16:43.675955690 +0300
+++ msf.mod/tools/exploit/reg.rb	2017-09-12 16:56:25.202977852 +0300
@@ -1,4 +1,4 @@
-#!/usr/bin/env ruby
+#!/data/data/com.termux/files/usr/bin/env ruby
 #
 # $Id$
 #
diff -uNr msf/tools/exploit/virustotal.rb msf.mod/tools/exploit/virustotal.rb
--- msf/tools/exploit/virustotal.rb	2017-09-11 18:16:43.675955690 +0300
+++ msf.mod/tools/exploit/virustotal.rb	2017-09-12 16:56:25.202977852 +0300
@@ -1,4 +1,4 @@
-#!/usr/bin/env ruby
+#!/data/data/com.termux/files/usr/bin/env ruby
 
 ##
 # This module requires Metasploit: https://metasploit.com/download
diff -uNr msf/tools/hardware/elm327_relay.rb msf.mod/tools/hardware/elm327_relay.rb
--- msf/tools/hardware/elm327_relay.rb	2017-09-11 18:16:43.675955690 +0300
+++ msf.mod/tools/hardware/elm327_relay.rb	2017-09-12 16:56:25.202977852 +0300
@@ -1,4 +1,4 @@
-#!/usr/bin/env ruby
+#!/data/data/com.termux/files/usr/bin/env ruby
 
 # ELM327 and STN1100 MCU interface to the Metasploit HWBridge
 
diff -uNr msf/tools/hardware/killerbee_msfrelay msf.mod/tools/hardware/killerbee_msfrelay
--- msf/tools/hardware/killerbee_msfrelay	2017-09-11 18:16:43.675955690 +0300
+++ msf.mod/tools/hardware/killerbee_msfrelay	2017-09-12 16:56:25.202977852 +0300
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/data/data/com.termux/files/usr/bin/env python
 # KillerBee Metasploit relay server
 
 import re
diff -uNr msf/tools/modules/committer_count.rb msf.mod/tools/modules/committer_count.rb
--- msf/tools/modules/committer_count.rb	2017-09-11 18:16:43.675955690 +0300
+++ msf.mod/tools/modules/committer_count.rb	2017-09-12 16:56:25.202977852 +0300
@@ -1,4 +1,4 @@
-#!/usr/bin/env ruby
+#!/data/data/com.termux/files/usr/bin/env ruby
 
 # The committer_count.rb is a way to tell who's been active over the last
 # given period. It's of course, quite coarse -- someone with 10 commits in a day
diff -uNr msf/tools/modules/file_pull_requests.rb msf.mod/tools/modules/file_pull_requests.rb
--- msf/tools/modules/file_pull_requests.rb	2017-09-11 18:16:43.675955690 +0300
+++ msf.mod/tools/modules/file_pull_requests.rb	2017-09-12 16:56:25.202977852 +0300
@@ -1,4 +1,4 @@
-#!/usr/bin/env ruby
+#!/data/data/com.termux/files/usr/bin/env ruby
 
 ###
 #
diff -uNr msf/tools/modules/generate_mettle_payloads.rb msf.mod/tools/modules/generate_mettle_payloads.rb
--- msf/tools/modules/generate_mettle_payloads.rb	2017-09-11 18:16:43.675955690 +0300
+++ msf.mod/tools/modules/generate_mettle_payloads.rb	2017-09-12 16:56:25.202977852 +0300
@@ -1,4 +1,4 @@
-#!/usr/bin/env ruby
+#!/data/data/com.termux/files/usr/bin/env ruby
 #
 # This script generates Mettle payload wrappers
 #
diff -uNr msf/tools/modules/missing_payload_tests.rb msf.mod/tools/modules/missing_payload_tests.rb
--- msf/tools/modules/missing_payload_tests.rb	2017-09-11 18:16:43.675955690 +0300
+++ msf.mod/tools/modules/missing_payload_tests.rb	2017-09-12 16:56:25.202977852 +0300
@@ -1,4 +1,4 @@
-#!/usr/bin/env ruby
+#!/data/data/com.termux/files/usr/bin/env ruby
 
 # Reads untest payload modules from log/untested-payloads.log (which can be produced by running `rake spec`) and prints
 # the statements that need to be added to `spec/modules/payloads_spec.rb`.  **Note: this script depends on the payload
diff -uNr msf/tools/modules/module_author.rb msf.mod/tools/modules/module_author.rb
--- msf/tools/modules/module_author.rb	2017-09-11 18:16:43.675955690 +0300
+++ msf.mod/tools/modules/module_author.rb	2017-09-12 16:56:25.202977852 +0300
@@ -1,4 +1,4 @@
-#!/usr/bin/env ruby
+#!/data/data/com.termux/files/usr/bin/env ruby
 #
 # $Id$
 # $Revision$
diff -uNr msf/tools/modules/module_commits.rb msf.mod/tools/modules/module_commits.rb
--- msf/tools/modules/module_commits.rb	2017-09-11 18:16:43.675955690 +0300
+++ msf.mod/tools/modules/module_commits.rb	2017-09-12 16:56:25.212977852 +0300
@@ -1,4 +1,4 @@
-#!/usr/bin/env ruby
+#!/data/data/com.termux/files/usr/bin/env ruby
 
 # Check the commit history of a module or tree of modules.
 # and sort by number of commits.
diff -uNr msf/tools/modules/module_count.rb msf.mod/tools/modules/module_count.rb
--- msf/tools/modules/module_count.rb	2017-09-11 18:16:43.675955690 +0300
+++ msf.mod/tools/modules/module_count.rb	2017-09-12 16:56:25.212977852 +0300
@@ -1,4 +1,4 @@
-#!/usr/bin/env ruby
+#!/data/data/com.termux/files/usr/bin/env ruby
 
 # Lists the current count of modules, by type, and outputs a bare CSV.
 
diff -uNr msf/tools/modules/module_disclodate.rb msf.mod/tools/modules/module_disclodate.rb
--- msf/tools/modules/module_disclodate.rb	2017-09-11 18:16:43.675955690 +0300
+++ msf.mod/tools/modules/module_disclodate.rb	2017-09-12 16:56:25.212977852 +0300
@@ -1,4 +1,4 @@
-#!/usr/bin/env ruby
+#!/data/data/com.termux/files/usr/bin/env ruby
 #
 # $Id$
 # $Revision$
diff -uNr msf/tools/modules/module_license.rb msf.mod/tools/modules/module_license.rb
--- msf/tools/modules/module_license.rb	2017-09-11 18:16:43.675955690 +0300
+++ msf.mod/tools/modules/module_license.rb	2017-09-12 16:56:25.212977852 +0300
@@ -1,4 +1,4 @@
-#!/usr/bin/env ruby
+#!/data/data/com.termux/files/usr/bin/env ruby
 #
 # $Id$
 #
diff -uNr msf/tools/modules/module_mixins.rb msf.mod/tools/modules/module_mixins.rb
--- msf/tools/modules/module_mixins.rb	2017-09-11 18:16:43.675955690 +0300
+++ msf.mod/tools/modules/module_mixins.rb	2017-09-12 16:56:25.212977852 +0300
@@ -1,4 +1,4 @@
-#!/usr/bin/env ruby
+#!/data/data/com.termux/files/usr/bin/env ruby
 #
 # $Id$
 #
diff -uNr msf/tools/modules/module_payloads.rb msf.mod/tools/modules/module_payloads.rb
--- msf/tools/modules/module_payloads.rb	2017-09-11 18:16:43.675955690 +0300
+++ msf.mod/tools/modules/module_payloads.rb	2017-09-12 16:56:25.212977852 +0300
@@ -1,4 +1,4 @@
-#!/usr/bin/env ruby
+#!/data/data/com.termux/files/usr/bin/env ruby
 #
 # $Id$
 #
diff -uNr msf/tools/modules/module_ports.rb msf.mod/tools/modules/module_ports.rb
--- msf/tools/modules/module_ports.rb	2017-09-11 18:16:43.675955690 +0300
+++ msf.mod/tools/modules/module_ports.rb	2017-09-12 16:56:25.212977852 +0300
@@ -1,4 +1,4 @@
-#!/usr/bin/env ruby
+#!/data/data/com.termux/files/usr/bin/env ruby
 #
 # $Id$
 #
diff -uNr msf/tools/modules/module_rank.rb msf.mod/tools/modules/module_rank.rb
--- msf/tools/modules/module_rank.rb	2017-09-11 18:16:43.675955690 +0300
+++ msf.mod/tools/modules/module_rank.rb	2017-09-12 16:56:25.212977852 +0300
@@ -1,4 +1,4 @@
-#!/usr/bin/env ruby
+#!/data/data/com.termux/files/usr/bin/env ruby
 #
 # $Id$
 #
diff -uNr msf/tools/modules/module_reference.rb msf.mod/tools/modules/module_reference.rb
--- msf/tools/modules/module_reference.rb	2017-09-11 18:16:43.675955690 +0300
+++ msf.mod/tools/modules/module_reference.rb	2017-09-12 16:56:25.212977852 +0300
@@ -1,4 +1,4 @@
-#!/usr/bin/env ruby
+#!/data/data/com.termux/files/usr/bin/env ruby
 #
 # This script lists each module with its references
 #
diff -uNr msf/tools/modules/module_targets.rb msf.mod/tools/modules/module_targets.rb
--- msf/tools/modules/module_targets.rb	2017-09-11 18:16:43.675955690 +0300
+++ msf.mod/tools/modules/module_targets.rb	2017-09-12 16:56:25.212977852 +0300
@@ -1,4 +1,4 @@
-#!/usr/bin/env ruby
+#!/data/data/com.termux/files/usr/bin/env ruby
 #
 # $Id$
 #
diff -uNr msf/tools/modules/payload_lengths.rb msf.mod/tools/modules/payload_lengths.rb
--- msf/tools/modules/payload_lengths.rb	2017-09-11 18:16:43.675955690 +0300
+++ msf.mod/tools/modules/payload_lengths.rb	2017-09-12 16:56:25.212977852 +0300
@@ -1,4 +1,4 @@
-#!/usr/bin/env ruby
+#!/data/data/com.termux/files/usr/bin/env ruby
 #
 # $Id$
 # $Revision$
diff -uNr msf/tools/modules/profile.sh msf.mod/tools/modules/profile.sh
--- msf/tools/modules/profile.sh	2017-09-11 18:16:43.675955690 +0300
+++ msf.mod/tools/modules/profile.sh	2017-09-12 16:56:25.212977852 +0300
@@ -1,3 +1,3 @@
-#!/bin/sh
+#!/data/data/com.termux/files/usr/bin/sh
 CPUPROFILE_FREQUENCY=500 CPUPROFILE=profile.dat RUBYOPT="-r`gem which perftools | tail -1`" ruby msfconsole -x "exit" z
 pprof.rb --gif profile.dat > profile.gif
diff -uNr msf/tools/modules/update_payload_cached_sizes.rb msf.mod/tools/modules/update_payload_cached_sizes.rb
--- msf/tools/modules/update_payload_cached_sizes.rb	2017-09-11 18:16:43.675955690 +0300
+++ msf.mod/tools/modules/update_payload_cached_sizes.rb	2017-09-12 16:56:25.212977852 +0300
@@ -1,4 +1,4 @@
-#!/usr/bin/env ruby
+#!/data/data/com.termux/files/usr/bin/env ruby
 #
 # This script updates the CachedSize constants in payload modules
 #
diff -uNr msf/tools/modules/verify_datastore.rb msf.mod/tools/modules/verify_datastore.rb
--- msf/tools/modules/verify_datastore.rb	2017-09-11 18:16:43.685955690 +0300
+++ msf.mod/tools/modules/verify_datastore.rb	2017-09-12 16:56:25.212977852 +0300
@@ -1,4 +1,4 @@
-#!/usr/bin/env ruby
+#!/data/data/com.termux/files/usr/bin/env ruby
 #
 # $Id$
 #
diff -uNr msf/tools/password/cpassword_decrypt.rb msf.mod/tools/password/cpassword_decrypt.rb
--- msf/tools/password/cpassword_decrypt.rb	2017-09-11 18:16:43.685955690 +0300
+++ msf.mod/tools/password/cpassword_decrypt.rb	2017-09-12 16:56:25.212977852 +0300
@@ -1,4 +1,4 @@
-#!/usr/bin/env ruby
+#!/data/data/com.termux/files/usr/bin/env ruby
 
 ##
 # This module requires Metasploit: https://metasploit.com/download
diff -uNr msf/tools/password/halflm_second.rb msf.mod/tools/password/halflm_second.rb
--- msf/tools/password/halflm_second.rb	2017-09-11 18:16:43.685955690 +0300
+++ msf.mod/tools/password/halflm_second.rb	2017-09-12 16:56:25.212977852 +0300
@@ -1,4 +1,4 @@
-#!/usr/bin/env ruby
+#!/data/data/com.termux/files/usr/bin/env ruby
 #
 # $Id$
 #
diff -uNr msf/tools/password/hmac_sha1_crack.rb msf.mod/tools/password/hmac_sha1_crack.rb
--- msf/tools/password/hmac_sha1_crack.rb	2017-09-11 18:16:43.685955690 +0300
+++ msf.mod/tools/password/hmac_sha1_crack.rb	2017-09-12 16:56:25.212977852 +0300
@@ -1,4 +1,4 @@
-#!/usr/bin/env ruby
+#!/data/data/com.termux/files/usr/bin/env ruby
 #
 # $Id$
 #
diff -uNr msf/tools/password/lm2ntcrack.rb msf.mod/tools/password/lm2ntcrack.rb
--- msf/tools/password/lm2ntcrack.rb	2017-09-11 18:16:43.685955690 +0300
+++ msf.mod/tools/password/lm2ntcrack.rb	2017-09-12 16:56:25.222977852 +0300
@@ -1,4 +1,4 @@
-#!/usr/bin/env ruby
+#!/data/data/com.termux/files/usr/bin/env ruby
 #
 # $Id$
 #
diff -uNr msf/tools/password/md5_lookup.rb msf.mod/tools/password/md5_lookup.rb
--- msf/tools/password/md5_lookup.rb	2017-09-11 18:16:43.685955690 +0300
+++ msf.mod/tools/password/md5_lookup.rb	2017-09-12 16:56:25.222977852 +0300
@@ -1,4 +1,4 @@
-#!/usr/bin/env ruby
+#!/data/data/com.termux/files/usr/bin/env ruby
 
 ##
 # This module requires Metasploit: https://metasploit.com/download
diff -uNr msf/tools/password/vxdigger.rb msf.mod/tools/password/vxdigger.rb
--- msf/tools/password/vxdigger.rb	2017-09-11 18:16:43.685955690 +0300
+++ msf.mod/tools/password/vxdigger.rb	2017-09-12 16:56:25.222977852 +0300
@@ -1,4 +1,4 @@
-#!/usr/bin/env ruby
+#!/data/data/com.termux/files/usr/bin/env ruby
 
 # $Id$
 
diff -uNr msf/tools/password/vxmaster.rb msf.mod/tools/password/vxmaster.rb
--- msf/tools/password/vxmaster.rb	2017-09-11 18:16:43.685955690 +0300
+++ msf.mod/tools/password/vxmaster.rb	2017-09-12 16:56:25.222977852 +0300
@@ -1,4 +1,4 @@
-#!/usr/bin/env ruby
+#!/data/data/com.termux/files/usr/bin/env ruby
 
 # $Id$
 
diff -uNr msf/tools/password/winscp_decrypt.rb msf.mod/tools/password/winscp_decrypt.rb
--- msf/tools/password/winscp_decrypt.rb	2017-09-11 18:16:43.685955690 +0300
+++ msf.mod/tools/password/winscp_decrypt.rb	2017-09-12 16:56:25.222977852 +0300
@@ -1,4 +1,4 @@
-#!/usr/bin/env ruby
+#!/data/data/com.termux/files/usr/bin/env ruby
 
 $LOAD_PATH.unshift File.expand_path('../../lib', __FILE__)
 require 'rex/parser/winscp'
diff -uNr msf/tools/recon/google_geolocate_bssid.rb msf.mod/tools/recon/google_geolocate_bssid.rb
--- msf/tools/recon/google_geolocate_bssid.rb	2017-09-11 18:16:43.685955690 +0300
+++ msf.mod/tools/recon/google_geolocate_bssid.rb	2017-09-12 16:56:25.222977852 +0300
@@ -1,4 +1,4 @@
-#!/usr/bin/env ruby
+#!/data/data/com.termux/files/usr/bin/env ruby
 #
 # This tool asks Google for the location of a given set of BSSIDs
 #
diff -uNr msf/tools/recon/list_interfaces.rb msf.mod/tools/recon/list_interfaces.rb
--- msf/tools/recon/list_interfaces.rb	2017-09-11 18:16:43.685955690 +0300
+++ msf.mod/tools/recon/list_interfaces.rb	2017-09-12 16:56:25.222977852 +0300
@@ -1,4 +1,4 @@
-#!/usr/bin/env ruby
+#!/data/data/com.termux/files/usr/bin/env ruby
 #
 # $Id$
 # $Revision$
diff -uNr msf/tools/recon/makeiplist.rb msf.mod/tools/recon/makeiplist.rb
--- msf/tools/recon/makeiplist.rb	2017-09-11 18:16:43.685955690 +0300
+++ msf.mod/tools/recon/makeiplist.rb	2017-09-12 16:56:25.222977852 +0300
@@ -1,4 +1,4 @@
-#!/usr/bin/env ruby
+#!/data/data/com.termux/files/usr/bin/env ruby
 
 #
 # This script takes a list of ranges and converts it to a per line ip list.
